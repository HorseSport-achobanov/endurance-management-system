@using Core.Application.Rpc;
@using EMS.Witness.Services;
@using EMS.Witness.Rpc;

@implements IDisposable;

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		@if (this.isHandshaking)
		{
			<div class="col-3">
				<div class="spinner-border text-danger" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
		}
		@if (this.rpcConnectionStatus == RpcConnectionStatus.Connecting)
		{
			<div class="col-3">
				<div class="spinner-border text-warning" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
		}
		@if (this.rpcConnectionStatus == RpcConnectionStatus.Connected)
		{
			<div class="col-3">
				<a class="navbar-brand" href="">eWitness</a>
			</div>
		}
		@if (!isHandshaking && rpcConnectionStatus == RpcConnectionStatus.Disconnected)
		{
			<button class="btn btn-warning" @onclick="_rpcInitializer.StartConnections">Reconnect</button>
		}
		<div class="col-3">
			<button class="btn btn-danger" @onclick="_rpcInitializer.Disconnect">Disconnect</button>
		</div>
		<div class="col-3">
			<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
				<span class="navbar-toggler-icon"></span>
			</button>
		</div>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<nav class="flex-column">
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="oi oi-home" aria-hidden="true"></span> Witness
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="startlist">
				<span class="oi oi-list-rich" aria-hidden="true"></span> Startlist
			</NavLink>
		</div>
	</nav>
</div>

@code {
	[Inject]
	private IWitnessContext Context { get; set; } = default!;
	[Inject]
	private IEnumerable<IRpcSocket> RpcClients { get; set; } = default!;
	[Inject]
	private IToaster _toaster { get; set; } = default!;
	[Inject]
	private IRpcInitalizer _rpcInitializer { get; set; } = default!;
	[Inject]
	private IParticipantsService _participantsService { get; set; } = default!;

	private bool CollapseNavMenu = true;

	private string NavMenuCssClass
		=> this.CollapseNavMenu ? "collapse" : string.Empty;

	private void ToggleNavMenu()
	{
		this.CollapseNavMenu = !this.CollapseNavMenu;
	}

	private RpcConnectionStatus rpcConnectionStatus;
	private bool isHandshaking;

	protected override async Task OnInitializedAsync()
	{
		this.rpcConnectionStatus = this.RpcClients.All(x => x.IsConnected) ? RpcConnectionStatus.Connected : RpcConnectionStatus.Disconnected;
		foreach (var client in this.RpcClients)
		{
			client.ServerConnectionChanged += HandleServerConnectionChanged;
			client.ServerConnectionInfo += HandleServerConnectionInfo;
		}
		this.Context.IsHandshakingEvent += HandleIsHandshakingEvent;
		await SafeActionHelper.Act(async () => await _rpcInitializer.StartConnections());
	}

	public void Dispose()
	{
		foreach (var client in this.RpcClients)
		{
			client.ServerConnectionChanged -= HandleServerConnectionChanged;
			client.ServerConnectionInfo -= HandleServerConnectionInfo;
		}
		this.Context.IsHandshakingEvent -= HandleIsHandshakingEvent;
	}

	private async void HandleServerConnectionChanged(object? sender, RpcConnectionStatus status)
	{
		if (this.rpcConnectionStatus != status)
		{
			this.rpcConnectionStatus = status;
			await this.InvokeAsync(this.StateHasChanged);
		}
	}

	private void HandleServerConnectionInfo(object? senderName, string message)
	{
		_toaster.Add(senderName!.ToString()!, message, UiColor.Warning, 10);
	}

	private async void HandleIsHandshakingEvent(object? sender, bool isHandshaking)
	{
		if (this.isHandshaking != isHandshaking)
		{
			this.isHandshaking = isHandshaking;
			await this.InvokeAsync(this.StateHasChanged);
		}
	}
}
`