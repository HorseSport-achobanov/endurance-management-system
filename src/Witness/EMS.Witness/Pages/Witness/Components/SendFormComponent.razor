@inherits StatefulComponent
@using Core.Application.Services;
@using Core.Domain.AggregateRoots.Manager
@using Core.Domain.AggregateRoots.Manager.Aggregates.ParticipantEntries;
@using Core.Models;
@using EMS.Witness.Common;
@using EMS.Witness.Services;
@inject IParticipantsService ParticipantsService;
@inject IDateService DateService;
@inject IPopupService PopupService;

<div class="row mb-1">
    <table class="table">
        <thead>
            <tr>
                <th>-</th>
                <th>#</th>
                <th>Name</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in this.ParticipantsService.Snapshots)
            {
                <tr>
                    <td>
                        <button class="btn btn-danger btn-table" @onclick="_ => this.ParticipantsService.RemoveSnapshot(entry)">-</button>
                    </td>
                    <td>
                        <strong>@entry.Number</strong>
                    </td>
                    <td>@entry.Name</td>
                    <td>
                        <button class="btn btn-warning btn-table" @onclick="_ => this.EditSnapshot(entry.Number, entry.ArriveTime.Value)">
                            @this.DateService.FormatTime(entry.ArriveTime!.Value, showMs: true)
                        </button>
                    </td>
                </tr>  
            }
        </tbody>
    </table>
</div>
<div class="row mb-1">
    <button class="btn btn-primary" @onclick="_ => this.SendSnapshots()">Send</button>
</div>

@code {
    protected override bool ShouldRender(object changedState)
    {
        return changedState == this.ParticipantsService.Snapshots;
    }

    private async Task EditSnapshot(string number, DateTime value)
    {
        var time = await this.PopupService.EditTime(value);
        if (time == null)
        {
            return;
        }
        this.ParticipantsService.EditSnapshot(number, time.Value);
    }

    private async Task SendSnapshots()
    {
        var type = await this.PopupService.SelecEventType();
        if (type is null)
        {
            return;
        }
        await this.ParticipantsService.Send(type.Value);
    }
}
