@inherits StatefulComponent;

@using Core.Application.Services;
@using Core.Domain.AggregateRoots.Manager.Aggregates.Participants;
@using Core.Domain.AggregateRoots.Manager;
@using Core.Models;
@using EMS.Witness.Common;
@using EMS.Witness.Services;
@inject IParticipantsService ParticipantsService;
@inject IPopupService PopupService;
@inject IDateService DateService;

<div class="accordion">
    <div class="accordion-item">
        <div class="row">
            @foreach (var batch in this.ParticipantsService.History)
            {
                <Collapsable>
                    <Header>@batch.Key</Header>
                    <Content>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Stage</th>
                                    <th>Name</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entry in batch.Value)
                                {
                                    <tr>
                                        <td>
                                            <strong>@entry.Number</strong>
                                        </td>
                                        <td>@entry.LapNumber</td>
                                        <td>@entry.Name</td>
                                        <td>@this.DateService.FormatTime(entry.ArriveTime!.Value)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row mb-1">
                            <button class="btn btn-warning" @onclick="_ => this.Save(batch.Key)">Send Again</button>
                        </div>
                    </Content>
                </Collapsable>
            }
        </div>
    </div>
</div>

@code {
    protected override bool ShouldRender(object changedState)
    {
        return changedState == this.ParticipantsService.History;
    }

    private async Task Save(string historyKey)
    {
        var type = await this.PopupService.SelecEventType();
        if (type is null)
        {
            return;
        }
        await this.ParticipantsService.Resend(historyKey, type.Value);
    }
}