@inherits StatefulComponent;

@inject IDateService DateService;
@inject IStartlistService StartlistService;
@using EMS.Witness.Common;
@using EMS.Witness.Services;
@using Core.Application.Services;
@using Core.Domain.AggregateRoots.Manager.Aggregates.Startlists;

<table class="table">
	<thead>
		<tr>
			<th>#</th>
			<th>Name</th>
			<th>Stage</th>
			<th>Distance</th>
			<th>Time</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var entry in this.StartlistService.Startlist)
		{
			<tr class="@(entry.HasStarted ? "text-muted" : "")">
				<td>@entry.Number</td>
				<td>@entry.AthleteName</td>
				<td>@entry.Stage</td>
				<td>@entry.Distance</td>
				@if (entry.HasStarted)
				{
					<td>@this.DateService.FormatTime(entry.StartTime)</td>

				}
				else
				{
					<td>@this.DateService.FormatTime(entry.StartTime - this.DateService.GetNow())</td>
				}
			</tr>
		}
	</tbody>
</table>

@code {
	private bool loop = true;
	protected override async Task OnInitializedAsync()
	{
		while(this.loop)
		{
			this.StartlistService.Startlist.Sort();
			await Task.Delay(TimeSpan.FromMilliseconds(300));
			await this.InvokeAsync(this.StateHasChanged);
		}
	}

	protected override bool ShouldRender(object changedState)
	{
		return changedState == this.StartlistService.Startlist;
	}

	public override void Dispose()
	{
		this.loop = false;
	}
}	
