@using Common.Application;
@using Common.Application.Behinds
@using Common.Application.CRUD;
@using Common.Domain;
@using Common.Services;
@using Not.Blazor.Forms;

@typeparam T where T : DomainEntity;
@typeparam TForm where TForm : NotFormFields<T>;
@inject ICreateBehind<T> _createBehind;
@inject ILocalizer _localizer;

<MudDialog>
    <DialogContent>
        <DynamicComponent Type="typeof(TForm)" Parameters="_formParameters" @ref="_dynamicComponent" />
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Create">
            @_localizer.Get("Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private DynamicComponent _dynamicComponent = default!;
    private Dictionary<string, object> _formParameters = new();

    [CascadingParameter]
    protected MudDialogInstance Dialog { get; set; } = default!;

    private async Task Create()
    {
        if (_dynamicComponent.Instance == null)
        {
            throw new Exception($"Instance of '{typeof(TForm)}' is null");
        }
        var form = ((TForm)_dynamicComponent.Instance);

        try
        {
            var entity = form.SubmitCreate();
            await _createBehind.Create(entity);
        }
        catch (DomainException validation)
        {
            await form.AddValidationError(validation.Property, validation.Message);
            return;
        }

        Dialog.Close(DialogResult.Ok(true));
    }
}