@* 
Notes:
This component serves as effective CreateDialogBase, however child components in Blazor override their parent's RenderTree.
So instead of using inheritance this is defined as an Internal* component which is reused by it's "children" components
*@

@using Common.Application;
@using Common.Domain;
@using Common.Services;
@using Not.Blazor.Forms;

@inherits LayoutComponentBase;
@typeparam T where T : DomainEntity;
@typeparam TForm where TForm : NotFormFields<T>;
@inject ILocalizer _localizer;

<MudDialog>
    <DialogContent>
        <DynamicComponent Type="typeof(TForm)" Parameters="_formParameters" @ref="_dynamicComponent"/>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Create">
            @_localizer.Get("Create") 
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private DynamicComponent _dynamicComponent = default!;
    private Dictionary<string, object> _formParameters = new();

    [Parameter]
    public Func<T, Task> OnCreate { get; set; } = default!;
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private async Task Create()
    {
        if (_dynamicComponent.Instance == null)
        {
            throw new Exception($"Instance of '{typeof(TForm)}' is null");
        }
        var form = ((TForm)_dynamicComponent.Instance);
        await OnCreate(form.SubmitCreate());
    }
}