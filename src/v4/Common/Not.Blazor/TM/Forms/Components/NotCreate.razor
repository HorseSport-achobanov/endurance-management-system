@using Common.Application.Behinds
@using Common.Services;
@using Not.Blazor.Forms;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM;

@typeparam T where T : DomainEntity;
@typeparam TForm where TForm : NotForm<T>
@inject ICreateBehind<T> _createBehind;
@inject ILocalizer _localizer;

<MudDialog>
    <DialogContent>
        <NotDynamic T="TForm" @ref="_dynamicForm" />
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Create">
            @_localizer.Get("Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private NotDynamic<TForm> _dynamicForm = default!;

    [CascadingParameter]
    protected MudDialogInstance Dialog { get; set; } = default!;

    private async Task Create()
    {
        try
        {
            var entity = _dynamicForm.Instance.SubmitCreate();
            await _createBehind.Create(entity);
            Dialog.Close(DialogResult.Ok(true));
        }
        catch (DomainException validation)
        {
            await _dynamicForm.Instance.AddValidationError(validation.Property, validation.Message);
            return;
        }
    }
}