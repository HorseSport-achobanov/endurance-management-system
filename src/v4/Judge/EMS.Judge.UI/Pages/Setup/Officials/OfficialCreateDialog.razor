@using EMS.Domain.Objects;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.Setup.Staff;
@using EMS.Judge.Setup.StaffMembers;
@using EMS.Judge.UI.Contexts;
@inject IManageChild<Event, Official> service;
@inject NavigationManager navigation;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Create Event</MudText>

        <EditForm Model="_model" OnSubmit="this.Submit">
            <DataAnnotationsValidator />

            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Place"
                        @bind-Value="_model.Name"
                        For="@(() => _model.Name)" />
                </MudCardContent>

                <MudCardContent>
                    <MudSelect Label="Role" @bind-Value="_model.Role">
                        @foreach (var item in Enum.GetValues<OfficialRole>())
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
            </MudCard>
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="this.dialog.Cancel">
            Cancel
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="this.Submit">
            Create
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    private MudDialogInstance dialog { get; set; } = default!;
    private OfficialCreateModel _model = new();

    private async Task Submit()
    {
        var entity = new Official(_model.Name, _model.Role);
        await this.service.Add(entity);
        this.dialog.Close(DialogResult.Ok(true));
    }
}
