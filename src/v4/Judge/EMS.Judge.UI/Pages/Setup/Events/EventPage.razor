@using Common.Application.Behinds;
@using Common.Domain;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Pages.Setup.Events
@using EMS.Judge.UI.Pages.Setup.Officials
@using Not.Blazor.Dialogs;
@using Not.Blazor.Forms;

@inject INotDialogService<Event, EventFields> _notDialogService;
@inject INotBehind<Event> _behind;

<EditForm Model="_model" OnSubmit="this.Update">
    <DataAnnotationsValidator />

    <MudCard>
        <EventFields Model="_model" @ref="_eventFields" />
    </MudCard>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">Update</MudButton>
</EditForm>

<MudPaper>
    <OfficialList />
</MudPaper>

@code {
    private EventFieldsModel _model = default!;
    private EventFields _eventFields = default!;

    protected override async Task OnInitializedAsync()
    {
        // TODO extract in IBehind<Event>
        var entity = await _behind.Read(default);
        if (entity == null)
        {
            return;
        }
        _model = new(entity);
    }

    protected async Task Update()
    {
        try
        {
            var entity = _eventFields.SubmitUpdate();
            await _behind.Update(entity);
        }
        catch (DomainException validation)
        {
            // TODO: fix by adding toaster dependency to fallback to when Property is null
            // i.e a general domain exception is raised, rather than one tied to a specific form field
            _eventFields.AddValidationError(validation.Property, validation.Message);
        }

    }
}