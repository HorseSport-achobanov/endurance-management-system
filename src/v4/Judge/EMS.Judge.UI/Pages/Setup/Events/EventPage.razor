@using Common.Application.Behinds;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Pages.Setup.Events
@using EMS.Judge.UI.Pages.Setup.Officials
@using Not.Blazor.Dialogs;

@inject INotDialogService<Event, EventCreateModel, EventFields> _notDialogService;
@inject INotBehind<Event> _behind;

<EditForm Model="_model" OnSubmit="this.Update">
    <DataAnnotationsValidator />

    <MudCard>
        <EventFields Model="_model" />
    </MudCard>
</EditForm>
    
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">Update</MudButton>

<MudPaper>
    <OfficialList />
</MudPaper>

@code {
    private EventUpdateModel _model = default!;

    protected override async Task OnInitializedAsync()
    {
        // TODO extract in IBehind<Event>
        var entity = await _behind.Read(default);
        if (entity == null)
        {
            return;
        }
        _model = new(entity);
    }

    protected async Task Update()
    {
        var entity = CreateEvent(_model);
        await _behind.Update(entity);
    }

    private Event CreateEvent(IEventFields input) => new Event(input.Place!, input.Country!);
}