@using Common.Domain;
@using Common.Exceptions;
@using Common.Helpers;
@using EMS.Domain.Objects;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Contexts;
@using Not.Blazor.Forms;
@using Not.Blazor.TM.Forms;

@inherits NotFormFields<Event>;
@inject ICountriesContext _countries;

@*
    TODO: Create MudForm to encapsulate EditForm, DataAnnotationsValidator, MudCard. 
    Is DataAnnotationsValidationr necessary? Probably not - remove and also remove 'For' setters on Mud components
*@
<EditForm Model="_model">
    <DataAnnotationsValidator />
    
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Place" @ref="_placeField"
            @bind-Value="_model.Place"
                          For="@(() => _model.Place)" />
        </MudCardContent>

        <MudCardContent>
            <MudAutocomplete Label="Country" @ref="_countryField"
                             T="Country"
                             CoerceText="true"
                             SearchFunc="@_countries.Search"
            @bind-Value="_model.Country"
                             For="@(() => _model.Country)" />
        </MudCardContent>
    </MudCard>
</EditForm>

@code {
    private MudTextField<string?> _placeField = default!;
    private MudAutocomplete<Country?> _countryField = default!;
    private EventFieldsModel _model = new();

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.Place), () => _placeField);
        RegisterInjector(nameof(_model.Country), () => _countryField);
    }

    public override void SetUpdateModel(Event @event)
    {
        _model = new EventFieldsModel(@event);
        // This isnt ideal but it works. It's necessary because this method is invoked 
        InvokeAsync(StateHasChanged);
    }

    public override Event SubmitCreate()
    {
        return new Event(_model.Place!, _model.Country!);
    }

    public override Event SubmitUpdate()
    {
        if (!_model.Id.HasValue)
        {
            throw ThrowHelper.Exception($"{nameof(_model.Id)} is null");
        }
        return new Event(_model.Id!.Value, _model.Place!, _model.Country!);
    }
}