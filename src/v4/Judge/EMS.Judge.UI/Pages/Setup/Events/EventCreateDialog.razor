@using EMS.Domain.Objects;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Contexts;
@inject ICreate<Event> Repository;
@inject ICountriesContext Countries;
@inject NavigationManager navigation;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Create Event</MudText>

        <EditForm Model="_model" OnSubmit="this.Submit">
            <DataAnnotationsValidator />

            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Place" 
                        @bind-Value="_model.Place"
                        For="@(() => _model.Place)" />
                </MudCardContent>

                <MudCardContent>
                    <MudAutocomplete Label="Country"
                        T="Country" 
                        CoerceText="true"
                        SearchFunc="@Countries.Search"
                        @bind-Value="_model.Country"
                        For="@(() => _model.Country)" />
                </MudCardContent>
            </MudCard>
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">
            Create
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    private EventCreateModel _model = new();

    // TODO: extract dialog in a component
    [CascadingParameter]
    private MudDialogInstance Dialog { get; set; } = default!;

    private async Task Submit()
    {
        var entity = new Event(_model.Place!, _model.Country!);
        await Repository.Create(entity);
        this.Dialog.Close(DialogResult.Ok(true));
    }
}
