@using Common.Domain;
@using EMS.Domain.Objects;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Contexts;
@using EMS.Judge.UI.Pages.Setup.StaffMembers;
@inject IDialogService dialogService;
@inject IManage<Event> Events;
@inject ICountriesContext Countries;

@if (_model == null)
{
    <MudPaper>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RenderEventCreateDialog">Create</MudButton>
    </MudPaper>
}
else
{
    <MudPaper>
        <MudTextField Label="Place" @bind-Value="_model.Place" />

        <MudAutocomplete Label="Country"
            T="Country"
            CoerceText="true"
            @bind-Value="_model.Country"
            SearchFunc="@Countries.Search" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">
            Create
        </MudButton>
    </MudPaper>

    <MudPaper>
        <StaffMemberList />
    </MudPaper>
}

@code {
    private EventUpdateModel _model = default!;

    protected override async Task OnInitializedAsync()
    {
        var entity = await Events.Read(0);
        if (entity == null)
        {
            return;
        }
        _model = new(entity);
    }

    protected async Task Update()
    {
        var entity = new Event(_model.Place, _model.Country);
        await Events.Update(entity);
    }

    private async Task RenderEventCreateDialog()
    {
        var dialog = this.dialogService.Show<EventCreateDialog>();
        await dialog.Result;
        await this.OnInitializedAsync();
    }
}