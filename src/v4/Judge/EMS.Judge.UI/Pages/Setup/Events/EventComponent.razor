@using Common.Domain;
@using EMS.Domain.Objects;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Contexts;
@using EMS.Judge.UI.Pages.Setup.Officials;
@inject IDialogService _dialogService;
@inject IRepository<Event> _repository;

@if (_model == null)
{
    <MudPaper>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RenderEventCreateDialog">Create</MudButton>
    </MudPaper>
}
else
{
    <EditForm Model="_model" OnSubmit="this.Update">
        <DataAnnotationsValidator />

        <MudCard>
            <EventForm Model="_model" />
        </MudCard>
    </EditForm>
    
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">Update</MudButton>

    <MudPaper>
        <OfficialList />
    </MudPaper>
}

@code {
    private EventUpdateModel _model = default!;

    protected override async Task OnInitializedAsync()
    {
        var entity = await _repository.Read(0);
        if (entity == null)
        {
            return;
        }
        _model = new(entity);
    }

    protected async Task Update()
    {
        var entity = new Event(_model.Place, _model.Country);
        await _repository.Update(entity);
    }

    private async Task RenderEventCreateDialog()
    {
        var dialog = _dialogService.Show<EventCreateDialog>();
        await dialog.Result;
        await OnInitializedAsync();
    }
}