@using Common.Application.CRUD;
@using Common.Application.Forms;
@using EMS.Domain.Setup.Entities;
@using EMS.Judge.Setup.Events;
@using EMS.Judge.UI.Pages.Setup.StaffMembers;
@using EMS.Judge.UI.Services;
@inject IManageChild<Event, StaffMember> _parentForm;
@inject NavigationManager _navigation;
@inject IDialogService dialogService;
@inject INavigationContext _navigationContext;

<MudText Typo="Typo.h5">Staff Members</MudText>

<MudTable Items="_parentForm.Entity!.Staff" Hover="true">
    <HeaderContent>
        <MudTh>Staff</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Staff">@context</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Outlined"
                        IconSize="Size.Small"
                        StartIcon="@Icons.Material.Filled.Delete"
                        Color="Color.Warning"
                        OnClick="() => _parentForm.Remove(context)">
                Remove
            </MudButton>

            <MudButton Variant="Variant.Filled"
                        IconSize="Size.Small"
                        StartIcon="@Icons.Material.Filled.Update"
                        Color="Color.Primary" 
                        OnClick="() => this.ToStaffMemberUpdate(context)">
                Update
            </MudButton>
        </MudTd>
    </RowTemplate>
        
</MudTable>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="this.RenderStaffMemberCreateDialog">Add</MudButton>

@code {
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void ToStaffMemberUpdate(StaffMember member)
    {
        _navigationContext.StaffMemberUpdate = member;
        _navigation.NavigateTo($"/staff-member");
    }

    private async Task RenderStaffMemberCreateDialog()
    {
        var dialog = this.dialogService.Show<StaffMemberCreateDialog>();
        await dialog.Result;
        await InvokeAsync(StateHasChanged);
    }
}
 