@using Not.Application.Behinds
@using Not.Services;
@using Not.Blazor.Components;
@using Not.Blazor.Forms;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM;

@inherits NotComponent
@typeparam T where T : DomainEntity;
@typeparam TForm where TForm : NotForm<T>

<MudDialog>
    <DialogContent>
        <NotDynamic T="TForm" @ref="_dynamicForm" />
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Create">
            @Localizer.Get("Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private NotDynamic<TForm>? _dynamicForm;
    [Inject]
    private ICreateBehind<T> _behind { get; set; } = default!;

    [CascadingParameter]
    protected MudDialogInstance Dialog { get; set; } = default!;

    private async Task Create()
    {
        try
        {
            var entity = _dynamicForm!.Instance.SubmitCreate();
            await _behind.Create(entity);
            Dialog.Close(DialogResult.Ok(true));
        }
        catch (DomainException validation)
        {
            await _dynamicForm!.Instance.AddValidationError(validation.Property, validation.Message);
            return;
        }
    }
}