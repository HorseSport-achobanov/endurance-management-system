@using System.Timers
@implements IDisposable

<div style="@($"color:{@_color};")">
   @_displayTime
</div>

@code {
    [Parameter]
    public string StartTime { get; set; } = default!;
    [Parameter]
    public double StopTimerAtTime { get; set; } = default!;

    private Timer _timer = default!;
    private MudTheme _theme = new MudTheme();
    private TimeSpan _time = default!;
    private string _displayTime = default!;
    private string _color = default!;

    protected override void OnParametersSet()
    {
        _time = TimeSpan.Parse(StartTime);
        FormatTime();
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = (_time > TimeSpan.FromMinutes(StopTimerAtTime));
        _timer.Enabled = _time > TimeSpan.FromMinutes(StopTimerAtTime);
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        _time = _time.Subtract(TimeSpan.FromSeconds(1));
        FormatTime();
        if (_time <= TimeSpan.FromMinutes(StopTimerAtTime))
        {
            _timer.Enabled = false;
        }
        _displayTime = _time.ToString().Replace("-", " - ");
        InvokeAsync(StateHasChanged);
    }

    public void FormatTime()
    {
        _displayTime = _time.ToString().Replace("-", " - ");
        if (_time > TimeSpan.FromMinutes(5))
        {
            _color = _theme.PaletteLight.Success.Value;
        }
        else if (_time > TimeSpan.FromMinutes(0))
        {
            _color = _theme.PaletteLight.Warning.Value;
        }
        else
        {
            _color = _theme.PaletteLight.Error.Value;
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}