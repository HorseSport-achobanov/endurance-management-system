@using Not.Blazor.Components
@using Not.Blazor.Forms
@using Not.Blazor.Mud.Components
@using Not.Blazor.Navigation
@using Not.Blazor.TM.Forms.Components
@using Not.Services

@inherits NotComponent
@typeparam T where T : DomainEntity
@typeparam TForm where TForm : NotForm<T>

<MudPaper Elevation="0" Class="@("pa-4 " + Class)" Style="@Style">

    <MudStack Row="true" Class="mb-2">
        <NotH2 Class="pt-1">@Name</NotH2>
        <MudSpacer />
        <NotButtonCreate Variant="Variant.Outlined" OnClick="CreateHandler" />
    </MudStack>

    @if (Items == null || !Items.Any())
    {
        <MudText Typo="Typo.body1">@EmptyMessage</MudText>
    }
    else
    {
        @foreach (var item in Items)    
        {
            <MudStack Row="true">
                <MudText Typo="Typo.body1" Class="pa-4">@item</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Update"
                               Color="Color.Primary"
                               Variant="Variant.Text"
                               Size="Size.Medium"
                               OnClick="() => this._contestantNavigator.Update(UpdateRoute, item)" />

                <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                               Color="Color.Error"
                               Variant="Variant.Text"
                               Size="Size.Medium"
                               OnClick="() => DeleteHandler(item)" />
            </MudStack>
            <MudDivider />
        }        
    }
</MudPaper>

@code {
    [Parameter]
    public string Name { get; set; } = default!;
    [Parameter]
    public string UpdateRoute { get; set; } = default!;

    public string EmptyMessage { get; set; } = default!;
    public IEnumerable<T> Items { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        //TODO improve the default message to enable a single translation entry for all empty component messages
        Name = Localizer.Get(Name);
        if(EmptyMessage == default)
        {
            string defaultMessage = $"No {Name.ToLower()} have been created for this event.";
            EmptyMessage = Localizer.Get(defaultMessage);
        }
        Items = await _setBehind.GetAll();
    }

    // TODO: Implement ObservableBehind pattern
    public async Task CreateHandler()
    {
        await _contestantNavigator.Create();
        Items = await _setBehind.GetAll();
        await InvokeAsync(StateHasChanged);
    }

    public async Task DeleteHandler(T item)
    {
        await _setBehind.Delete(item);
        Items = await _setBehind.GetAll();
        await InvokeAsync(StateHasChanged);
    }

    [Inject]
    private INotSetBehind<T> _setBehind { get; set; } = default!;
    [Inject]
    private IFormNavigator<T, TForm> _contestantNavigator { get; set; } = default!;
}