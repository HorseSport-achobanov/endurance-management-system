@using Not.Blazor.Components
@using Not.Blazor.TM;
@using Not.Blazor.TM.Forms
@using Not.Blazor.TM.Models;

@typeparam T
@inherits BindableValueComponent<T>
@implements IMudBaseInputWrapper<T>

<MudSelect T="T" @bind-Value="Value" @ref="MudBaseInput" Placeholder="@Placeholder" Label="@Localizer.Get(Label)" >
    @foreach (var item in Items)
    {
        <MudSelectItem Value="@item.Value">@item.Label</MudSelectItem>
    }
    @if(!Items.Any())
    {
        var typeName = typeof(T).ToString().Split(".").Last();
        var emptyLabel = $"No items available in this list yet. <br/>To add items populate the <b>{typeName}</b> collection.";
        var localizedMessage = Localizer.Get(emptyLabel);
        var emptyItem = new NotListModel<T>(localizedMessage);
         <MudSelectItem Class="py-10 px-5" Value="emptyItem.Value">@(new MarkupString(emptyItem.Label))</MudSelectItem>
    }
</MudSelect>

@code {
    // TODO: Implement Validation injection for custom input components
    [Parameter]
    public List<NotListModel<T>> Items { get; set; } = new();
    [Parameter]
    public string Label { get; set; } = default!;
    [Parameter]
    public string Placeholder { get; set; } = default!;

    public MudBaseInput<T> MudBaseInput { get; private set; } = default!;
}