@using Not.Services;
@using Not.Blazor.Components;
@using System.Reflection;

@inherits NotComponent

@* auto detect type of field and determine the MudBlazor component suitable for the input  *@
@switch (TypeString)
        {
            case "System.Int32":
                <MudNumericField Label="Standard" Variant="Variant.Text" Min="0" Max="10" /> 
                break;
            case "System.String":
                <MudTextField @bind-Value="TextValue" Label="Standard" Variant="Variant.Text"></MudTextField>
                break;
            case "System.String[]":
                <MudSelect T="string" Label="Coffee" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Cappuccino")" />
                    <MudSelectItem Value="@("Cafe Latte")" />
                    <MudSelectItem Value="@("Espresso")" />
                </MudSelect>
                break;
        }

@code {
    [Parameter]
    public string ClassName { get; set; }
    [Parameter]
    public string FieldName { get; set; }
    [Parameter]
    public string Label { get; set; }

    public string TypeString { get; set; }
    
    //placeholder
    public string TextValue { get; set; }

    protected override void OnInitialized()
    {
        Assembly assembly = Assembly.GetExecutingAssembly(); // Change to the appropriate assembly if the class is in a different one
        Type classType = assembly.GetType(ClassName);

        object instance = Activator.CreateInstance(classType);


        // in testing of the approach the commented code that extracts a single field by its name didn't work for some reason 
        // but the forEach loop did

        // Type type = assembly.GetType(FieldName);
        // FieldInfo fieldInfo = type.GetField(FieldName, BindingFlags.Public | BindingFlags.Instance);
        // Type fieldType = fieldInfo.FieldType;
        FieldInfo[] fields = classType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);

        foreach (FieldInfo field in fields)
        {
            Type fieldType = field.FieldType;
            Console.WriteLine($"Field: {field.Name}, Type: {fieldType.Name}");
            if (field.Name == "FieldName")
            {
                TypeString = fieldType.ToString();
            }
        }
    }
    

}
