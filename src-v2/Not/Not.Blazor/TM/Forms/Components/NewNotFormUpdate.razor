@using Not.Blazor.Mud.Components
@using Not.Services;
@using Not.Blazor.Components;
@using Not.Blazor.Forms;
@using Not.Blazor.Navigation;

@inherits NotComponent
@typeparam T;
@typeparam TForm where TForm : NotForm<T>;

<MudContainer Class="not-page-mid-width">
    <NotDynamic T="T" TForm="TForm" @ref="_form" Model="Model"/>
    
    <MudStack Row="true" Class="mt-4">
        <NotButtonUpdate OnClick="Update" />

         <NotButtonBack OnClick="NavigateBack" /> 
    </MudStack>
</MudContainer>

@code {
    NotDynamic<T, TForm>? _form;

    [Inject]
    ICrumbsNavigator _navigator { get; set; } = default!;
    [Inject]
    IUpdateBehind<T> _behind { get; set; } = default!;

    [Parameter]
    public T Model { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // TODO: maybe use OnParametersSet?
        // Needs to wait untill ref is evaluated. Also this makes it necessary to trigger a manual rerender of TForm
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-8.0#handle-incomplete-async-actions-at-render
        // while (_form == null || Model == null)
        // {
        //     await Task.Delay(TimeSpan.FromMilliseconds(10));
        // }
        // _form!.Instance.SetUpdateModel(Model);
        // _form!.Instance.TriggerRender();
    }

    async Task Update()
    {
        try
        {
            await _behind.Update(Model);
            NavigateBack();
        }
        catch (DomainException domainException)
        {
            await _form!.Instance.AddValidationError(domainException.Property, domainException.Message);
        }
    }

    void NavigateBack()
    {
        _navigator.NavigateBack();
    }
}
