@using Not.Services;
@using Not.Blazor.Components;
@using Not.Blazor.Forms;
@using Not.Blazor.Navigation;

@inherits NotComponent
@typeparam T where T : DomainEntity;
@typeparam TForm where TForm : NotForm<T>;

<MudContainer Class="not-page-mid-width">
    <NotDynamic T="TForm" @ref="_form" />

    <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">
        @Localizer.Get("Update")
    </MudButton>
</MudContainer>

@code {
    private NotDynamic<TForm>? _form;

    [Parameter]
    public T Entity { get; set; } = default!;
    [Parameter]
    public Func<T, Task> UpdateAction { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // TODO: maybe use OnParametersSet?
        // Needs to wait untill ref is evaluated. Also this makes it necessary to trigger a manual rerender of TForm
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-8.0#handle-incomplete-async-actions-at-render
        while (_form == null || Entity == null)
        {
            await Task.Delay(TimeSpan.FromMilliseconds(10));
        }
        _form!.Instance.SetUpdateModel(Entity);
        _form!.Instance.TriggerRender();
    }

    protected async Task Update()
    {
        try
        {
            var entity = _form!.Instance.SubmitUpdate();
            await UpdateAction(entity);
        }
        catch (DomainException domainException)
        {
            await _form!.Instance.AddValidationError(domainException.Property, domainException.Message);
        }
    }
}
