@using Not.Blazor.Notifier

@inherits LayoutComponentBase

<MudThemeProvider @ref="_themeProvider" />
<MudDialogProvider CloseOnEscapeKey="true" CloseButton="true" MaxWidth="MaxWidth.Small" FullWidth="true" />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    @if (!_hideLayout)
    {
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleDrawer())" />

            <MudSpacer />

            <NHeadline3 Content="NTS v0.2" Style="color:#9ca2b8" />

            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
            <MudDrawerHeader>
                <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
            </MudDrawerHeader>

            <NavMenu />
        </MudDrawer>
    }

    <MudMainContent>
        <CascadingValue Value="@_themeProvider">
            <MudContainer MaxWidth="MaxWidth.Large" Class="py-4">
                @Body
            </MudContainer>

            <BlazorNotifier />
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _themeProvider = default!;
    private bool _hideLayout;
    private bool _drawerOpen = true;

    protected override void OnInitialized()
    {
        PrintableComponent.OnToggle(ToggleLayoutVisibility);
    }

    void ToggleDrawer()
    {
        this._drawerOpen = !this._drawerOpen;
    }

    async void ToggleLayoutVisibility()
    {
        _hideLayout = !_hideLayout;
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .not-mid-width {
        max-width: 800px;
        margin: auto;
    }
    .not-mid-height {
        min-height: 400px;
    }
</style>
