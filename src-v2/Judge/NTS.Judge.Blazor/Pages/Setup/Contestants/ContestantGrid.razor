@using NTS.Domain.Setup.Entities;
@using Not.Blazor.Navigation;
@using Not.Services;

@inherits NotComponent

@if (_parentBehind.Children.Any())
{
    <NotH2 Class="pt-6 pl-6">@Localizer.Get("Contestants")</NotH2>
    <NotButtonCreate Class="mt-1 ml-6 mb-3" OnClick="_contestantNavigator.Create" />
    <MudDivider />
    <MudDataGrid  T="Contestant" Items="_parentBehind.Children" ReadOnly="true" Bordered="true" Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.StartTimeOverride" Title="@Localizer.Get("Start Time Override")" />
            <TemplateColumn CellClass="action-column">
                <CellTemplate>
                    <NotButtonDelete OnClick="() => _parentBehind.Delete(context.Item)" Class="action-button-top" />
                    <NotButtonUpdate OnClick="() => this._contestantNavigator.Update(CONTESTANT_UPDATE, context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
else
{
    <MudPaper Elevation="0">
        <div class="pa-6">
            <NotH2>@Localizer.Get("Contestants")</NotH2>
            <NotButtonCreate OnClick="_contestantNavigator.Create" Class="toolbar-button" />
            <p>@Localizer.Get("No contestants have been created for this event.")</p>
        </div>
    </MudPaper>
}

@code {
    [Inject]
    private INotBehindParent<Contestant> _parentBehind { get; set; } = default!;
    [Inject]
    private IFormNavigator<Contestant, ContestantForm> _contestantNavigator { get; set; } = default!;
}