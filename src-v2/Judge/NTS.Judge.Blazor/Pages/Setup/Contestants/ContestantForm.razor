@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.Forms;
@using Not.Blazor.TM;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;
@using Not.Blazor.TM.Models
@using Not.Extensions;
@using NTS.Judge.Blazor.Pages.Setup.Combinations;

@inherits NotForm<Contestant>;

<EditForm Model="_model">
    <NotSelect T="Combination" Label="@Localizer.Get("Combination")" Placeholder="@Localizer.Get("Select a combination")"
               Items="_combinations" @bind-Value="_model.Combination" />
    <NotSwitch @bind-Value="_model.IsUnranked" Label="Unranked" />
    <NotSwitch @bind-Value="_overrideStartTime" Label="Override Start Time"/>
    @if (_overrideStartTime)
    {
        <MudTimePicker DisableToolbar="true" @ref="_timeField" @bind-Time="_model.StartTimeOverride" Label="@Localizer.Get("Start Time")" />
    }
    <NotSwitch @bind-Value="_overrideMaxSpeed" Label="Override Max Speed" />
    @if (_overrideMaxSpeed)
    {
        <MudNumericField @bind-Value="_model.MaxSpeedOverride" Label="Standard" Variant="Variant.Text" Min="5" Max="20" />
    }
</EditForm>

@code {
    private MudPicker<TimeSpan?> _timeField = default!;
    private ContestantFormModel _model { get; set; } = new();
    private bool _overrideStartTime;
    private bool _overrideMaxSpeed;
    private List<NotListModel<Combination>> _combinations = new();

    [Inject]
    private INotSetBehind<Combination> _setBehind { get; set; } = default!;

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.StartTimeOverride), () => _timeField);
    }

    protected async override Task OnInitializedAsync()
    {
        var combinations = await _setBehind.GetAll();
        _combinations = NotListModel.FromEntity<Combination>(combinations).ToList();
    }

    public override void SetUpdateModel(Contestant contestant)
    {
        _model = new ContestantFormModel(contestant);
        _overrideStartTime = _model.StartTimeOverride != null;
    }

    public override Contestant SubmitCreate()
    {
        var newStartTimeOffset = _model.StartTimeOverride?.ToDateTimeOffset();
        return Contestant.Create(newStartTimeOffset, _model.IsUnranked, _model.Combination, _model.MaxSpeedOverride);
    }

    public override Contestant SubmitUpdate()
    {
        var newStartTimeOffset = _model.StartTimeOverride?.ToDateTimeOffset();
        return Contestant.Update(_model.Id, newStartTimeOffset, _model.IsUnranked, _model.Combination, _model.MaxSpeedOverride);
    }
}