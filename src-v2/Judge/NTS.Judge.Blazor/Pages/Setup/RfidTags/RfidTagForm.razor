@using NTS.Judge.Blazor.Ports
@using NTS.Domain.Setup.Entities

<MudPaper Class="d-flex flex-row pt-3 pb-3" Style="height:70px" Elevation="0">
    <MudText Class="mr-4 mt-4" Typo="Typo.caption">Scan Rfid Chip</MudText>
    @if(Tag!=null && !_awaitingInput){
        <MudPaper Class="d-flex flex-column align-self-center mt-3">
            <MudText Class="ml-2 mr-2" Typo="Typo.overline"> Tag Id: @Tag.TagId</MudText>
        </MudPaper>
    }
    @if(_awaitingInput)
    {
        <MudPaper Class="d-flex flex-column ml-4 mr-4" Elevation="0">
            <MudProgressCircular Class="align-self-center" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            <MudText Typo="Typo.overline" Color="Color.Primary">
                Waiting for Chip Scan
            </MudText>
        </MudPaper>
    }
    else if(Tag==null)
    {
        <MudButton Class="ml-4 mt-3" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add" OnClick="AddTagHandler">Add Tag</MudButton>
    }
    else
    {
        <MudButton Class="ml-4 mt-3" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Delete" OnClick="RemoveTagHandler">Remove Tag</MudButton>
    }
</MudPaper>

@code {
    [Inject]
    public ITagWriter _tagWriter { get; set; } = default!;
    [Parameter]
    public int CombinationNumber {get; set; }
    public IdTag? Tag { get; private set; }
    public bool _awaitingInput = false;

    public async Task AddTagHandler()
    {
        _awaitingInput = true;
        Tag = await _tagWriter.WriteTag(CombinationNumber);
        _awaitingInput = false;
    }

    public void RemoveTagHandler()
    {
        Tag = null;
    }
}
