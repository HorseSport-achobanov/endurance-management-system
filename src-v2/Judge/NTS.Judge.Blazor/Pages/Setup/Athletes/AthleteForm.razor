@using NTS.Domain.Objects
@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Blazor.Contexts
@using Not.Blazor.TM
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;
@using Not.Blazor.TM.Models;

@inherits FormTM<AthleteFormModel>;

<EditForm Model="Model">
    <MudTextField @ref="_nameField" @bind-Value="Model.Name" Label="@Localizer.Get("Name")" />

    <MudTextField @ref="_feiIdField" @bind-Value="Model.FeiId" Label="Fei Id" HelperText="@Localizer.Get(OPTIONAL_FEI_ID)"
        Variant="Variant.Text" Margin="Margin.Dense" />

    <NotAutocomplete T="Country" @ref="_countryField" @bind-Value="Model.Country" Label="@nameof(Athlete.Country)" Search="_countries.Search" />

    <MudTextField @ref="_clubField" @bind-Value="Model.Club" Label="Club" Variant="Variant.Text" Margin="Margin.Dense" />

    <NotSelect @ref="_categoryField" T="AthleteCategory" Items="_categories" @bind-Value="Model.Category" Label="Category" />
</EditForm>

@code {
    // TODO: Introduce NotText variants for consistency
    private MudTextField<string?> _nameField = default!;
    private MudTextField<string?> _feiIdField = default!;
    private NotAutocomplete<Country?> _countryField = default!;
    private MudTextField<string?> _clubField = default!;
    private NotSelect<AthleteCategory> _categoryField = default!;

    [Inject]
    private ICountriesContext _countries { get; set; } = default!;
    private List<NotListModel<AthleteCategory>> _categories = NotListModel.FromEnum<AthleteCategory>().ToList();

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(Athlete.Person), () => _nameField);
        RegisterInjector(nameof(Athlete.Country), () => _countryField);
        RegisterInjector(nameof(Athlete.Club), () => _clubField);
        RegisterInjector(nameof(Athlete.FeiId), () => _feiIdField);
        RegisterInjector(nameof(Athlete.Category), () => _categoryField);
    }
}