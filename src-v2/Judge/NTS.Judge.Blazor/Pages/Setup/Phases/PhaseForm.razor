@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.Forms;
@using Not.Blazor.TM;
@using Not.Blazor.TM.Models;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;

@inherits NotForm<Phase>;

<EditForm Model="_model">
    <NotSelect T="Lap" Label="@Localizer.Get("Loop distance")" Placeholder="@Localizer.Get("Select a loop")"
               Items="_items" @bind-Value="_model.Lap" />
    <MudNumericField T="int" @ref="_recoveryField" @bind-Value="_model.Recovery" Min="0" Label="@Localizer.Get("Recovery Time")" />
    <MudNumericField T="int" @ref="_restField" @bind-Value="_model.Rest" Min="0" Label="@Localizer.Get("Rest Duration")" />
</EditForm>

@code {
    private MudSelect<Lap> _lapField = default!;
    private MudNumericField<int> _recoveryField = default!;
    private MudNumericField<int> _restField = default!;
    private PhaseFormModel _model { get; set; } = new();

    private IEnumerable<NotListModel<Lap>> _items = default!;

    [Inject]
    private INotSetBehind<Lap> _setBehind { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        var items = await _setBehind.GetAll();
        _items = NotListModel.FromEntity<Lap>(items);
    }

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.Lap), () => _lapField);
        RegisterInjector(nameof(_model.Recovery), () => _recoveryField);
        RegisterInjector(nameof(_model.Rest), () => _restField);
    }

    public override void SetUpdateModel(Phase phase)
    {
        _model = new PhaseFormModel(phase);
    }

    public override Phase SubmitCreate()
    {
        return Phase.Create(_model.Lap, _model.Recovery, _model.Rest);
    }

    public override Phase SubmitUpdate()
    {        
        return Phase.Update(_model.Id, _model.Lap, _model.Recovery, _model.Rest);
    }
}