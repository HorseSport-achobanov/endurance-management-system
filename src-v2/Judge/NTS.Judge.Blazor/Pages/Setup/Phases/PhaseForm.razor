@using NTS.Domain.Setup.Entities
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.CRUD.Forms.Components
@using Not.Blazor.CRUD.Lists.Ports


@using Not.Structures

@inherits FormTM<PhaseFormModel>

<EditForm Model="Model">
    <NSelect @ref="_loopField" T="Loop" Label="Loop distance" Placeholder="Select a loop" Items="_loops" @bind-Value="Model.Loop" />

    <MudNumericField T="int" @ref="_recoveryField" @bind-Value="Model.Recovery" Min="0" Label="Recovery Time" />

    <MudNumericField @ref="_restField" @bind-Value="Model.Rest" Min="0" Label="Rest Duration" />
</EditForm>

@code {
    NSelect<Loop> _loopField = default!;
    MudNumericField<int> _recoveryField = default!;
    MudNumericField<int?> _restField = default!;
    List<NotListModel<Loop>> _loops = new();

    [Inject]
    IListBehind<Loop> _behind { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await Observe(_behind);
        _loops = NotListModel.FromEntity<Loop>(_behind.Items).ToList();
    }

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(Phase.Loop), () => _loopField);
        RegisterInjector(nameof(Phase.Recovery), () => _recoveryField);
        RegisterInjector(nameof(Phase.Rest), () => _restField); 
    }
}
