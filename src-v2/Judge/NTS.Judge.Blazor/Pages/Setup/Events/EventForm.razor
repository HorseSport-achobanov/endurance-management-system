@using NTS.Domain.Objects;
@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Blazor.Setup.Events;
@using NTS.Judge.Blazor.Contexts;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;

@inherits NotForm<Event>;

<EditForm Model="_model">
    <NotFormBasic T="EventFormModel" Entity="_model">
        @* non-auto fields: *@
        <MudAutocomplete T="Country" @ref="_countryField" @bind-Value="_model.Country" Label="@Localizer.Get(nameof(Event.Country))"
                         CoerceText="true"
                         SearchFunc="_countries.Search" />
    </NotFormBasic>
</EditForm>

@code {
    private MudTextField<string?> _placeField = default!;
    private MudAutocomplete<Country?> _countryField = default!;
    private EventFormModel _model = new();
    [Inject]
    private ICountriesContext _countries { get; set; } = default!;

    public override void RegisterValidationInjectors()
    {

        RegisterInjector(nameof(_model.Place), () => _placeField);
        RegisterInjector(nameof(_model.Country), () => _countryField);
    }

    public override void SetUpdateModel(Event @event)
    {
        _model = new EventFormModel(@event);
    }

    public override Event SubmitCreate()
    {
        return Event.Create(_model.Place!, _model.Country!);
    }

    public override Event SubmitUpdate()
    {
        if (!_model.Id.HasValue)
        {
            throw GuardHelper.Exception($"{nameof(_model.Id)} is null");
        }
        return Event.Update(_model.Id!.Value, _model.Place!, _model.Country!);
    }
}