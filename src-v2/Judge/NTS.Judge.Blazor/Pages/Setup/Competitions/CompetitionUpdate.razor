@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Blazor.Pages.Setup.Phases
@using Not.Blazor.Components;
@using Not.Blazor.Navigation;
@using Not.Blazor.TM
@using Not.Blazor.TM.Forms.Components
@using NTS.Judge.Blazor.Pages.Setup.Contestants
@using Not.Blazor.TM.Pages

@attribute [Route(COMPETITION_UPDATE)]
@inherits NotComponent

<NotPage Title="Configure Competition">

    <Main>
        <NotGrid Spacing="8">
            
            <MudItem xs="12">
                <NotFormUpdate T="Competition" TForm="CompetitionForm" Entity="_competition" UpdateAction="Update" />
            </MudItem>

            <MudItem xs="6">
                <NotSetList T="Phase" TForm="PhaseForm" UpdateRoute="@PHASE_UPDATE" />
            </MudItem>

            <MudItem xs="6">
                <NotSetList T="Contestant" TForm="ContestantForm" UpdateRoute="@CONTESTANT_UPDATE" />
            </MudItem>

        </NotGrid>
    </Main>

</NotPage>

@code {
    private Competition _competition { get; set; } = default!;
    [Inject]
    private INotSetBehind<Competition> _setBehind { get; set; } = default!;
    [Inject]
    private INotParentBehind<Competition> _competitionWithChildren { get; set; } = default!;
    [Inject]
    private INavigator _navigator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var competition = _navigator.ConsumeParameter<Competition>();
        _competition = await _competitionWithChildren.Initialize(competition.Id);
    }

    protected async Task Update(Competition competition)
    {
        await _setBehind.Update(competition);
        _navigator.NavigateTo(ENDURANCE_EVENT_PAGE);
    }
}
