@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.Forms;
@using Not.Blazor.TM
@using Not.Blazor.TM.Models;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;
@using Not.Extensions;

@inherits NotForm<Competition>;

<EditForm Model="_model">
    <MudTextField @ref="_nameField" @bind-Value="_model.Name" Label="@Localizer.Get("Name")" />
    <NotSelect T="CompetitionType" Label="@Localizer.Get("Type")" @bind-Value="_model.Type" Items="_items" />
    <MudDatePicker DisableToolbar="true" @ref="_dayField" @bind-Date="_model.StartDay" Label="@Localizer.Get("Date")" />
    <MudTimePicker DisableToolbar="true" @ref="_timeField" @bind-Time="_model.StartTime" Label="@Localizer.Get("Time")" />
    <NotSwitch @bind-Value="_model.UseAutomaticCRI" Label="Use automatic CRI" />
    @if (_model.UseAutomaticCRI)
    {
        <MudNumericField @bind-Value="_model.CRIRecovery" />
    }
</EditForm>

    @code {
    private MudTextField<string> _nameField = default!;
    private NotSelect<CompetitionType> _typeField = default!;
    private MudPicker<DateTime?> _dayField = default!;
    private MudPicker<TimeSpan?> _timeField = default!;
    private CompetitionFormModel _model { get; set; } = new();

    private IEnumerable<NotListModel<CompetitionType>> _items = NotListModel.FromEnum<CompetitionType>();

    public DateTimeOffset CombineStartDayAndTime(DateTime? startDay, TimeSpan? startTime)
    {
        var start = startDay.GetValueOrDefault(DateTime.Today);
        var startDayTime = start.Date.Add(startTime.GetValueOrDefault(DateTime.Now.TimeOfDay));
        var startTimeOffset = startDayTime.ToDateTimeOffset();
        return startTimeOffset;
    }

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.Name), () => _nameField);
        RegisterInjector(nameof(_model.StartTime), () => _timeField);
        //RegisterInjector(nameof(_model.Type), () => _typeField);
    }

    public override void SetUpdateModel(Competition competition)
    {
        _model = new CompetitionFormModel(competition);
    }

    public override Competition SubmitCreate()
    {
        DateTimeOffset startTimeOffset = CombineStartDayAndTime(_model.StartDay, _model.StartTime);
        var criRecovery = GetCRIRecovery();
        return Competition.Create(_model.Name, _model.Type, startTimeOffset, criRecovery);
    }

    public override Competition SubmitUpdate()
    {
        DateTimeOffset startTimeOffset = CombineStartDayAndTime(_model.StartDay, _model.StartTime);
        var criRecovery = GetCRIRecovery();
        return Competition.Update(_model.Id!.Value, _model.Name, _model.Type, startTimeOffset, criRecovery, _model.Phases!, _model.Contestants!);
    }

    private int? GetCRIRecovery()
    {
        return _model.UseAutomaticCRI
            ? _model.CRIRecovery
            : null;
    }
}