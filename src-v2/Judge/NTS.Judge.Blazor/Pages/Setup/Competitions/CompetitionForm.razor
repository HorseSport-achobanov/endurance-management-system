@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.Forms;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;

@inherits NotForm<Competition>;

<NotH2>@Localizer.Get("Competition")</NotH2>
<EditForm Model="_model">
    <MudTextField @ref="_nameField" @bind-Value="_model.Name" Label="@Localizer.Get("Name")"></MudTextField>
    <MudDatePicker @bind-Date="_model.Start" Label="@Localizer.Get("Date")"></MudDatePicker>
    <MudSelect @ref="_typeField" @bind-Value="_model.Type" Label="@Localizer.Get(nameof(Competition.Type))" @onchange="(_) => SubmitUpdate()">
        @foreach (var item in Enum.GetValues<CompetitionType>())
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
</EditForm>

@code {
    private MudTextField<string> _nameField = default!;
    private MudSelect<CompetitionType> _typeField = default!;
    private MudPicker<DateTime> _timeStampField = default!;
    private CompetitionFormModel _model { get; set; } = new();
    public DateTime? date { get; set; }

    protected override void OnInitialized()
    {
        date = _model.Start;
    }

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.Name), () => _nameField);
        //RegisterInjector(nameof(_model.Start), () => _timeStampField);
        RegisterInjector(nameof(_model.Type), () => _typeField);
    }

    public override void SetUpdateModel(Competition competition)
    {
        _model = new CompetitionFormModel(competition);
    }

    public override Competition SubmitCreate()
    {
        DateTime startTime = _model.Start.GetValueOrDefault(DateTime.MinValue);
        return Competition.Create(_model.Name ,_model.Type, startTime);
    }

    public override Competition SubmitUpdate()
    {
        DateTime startTime = _model.Start.GetValueOrDefault(DateTime.MinValue);
        return Competition.Update(_model.Name, _model.Type, startTime, _model.Loops, _model.Contestants);
    }
}