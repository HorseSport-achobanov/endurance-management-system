@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Setup.Competitions
@using Not.Blazor.Forms;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;

@inherits NotForm<Loop>;

<EditForm Model="_model">
    <MudNumericField T="double" @ref="_distanceField" @bind-Value="_model.Distance"  Label="@Localizer.Get("Distance")" />
    <MudNumericField T="int" @ref="_recoveryField" @bind-Value="_model.Recovery" Min="0" Label="@Localizer.Get("Recovery Time")" />
    <MudNumericField T="int" @ref="_restField" @bind-Value="_model.Rest" Min="0" Label="@Localizer.Get("Rest Duration")" />
    <MudSwitch T="bool" @ref="_isFinalField" @bind-Value="_model.IsFinal" Label="@Localizer.Get("Final Lap")"
               ThumbIcon="@(_model.IsFinal==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
               ThumbIconColor="@(_model.IsFinal==true ? Color.Success : Color.Error)"
    />
</EditForm>

@code {
    private MudNumericField<double> _distanceField = default!;
    private MudNumericField<int> _recoveryField = default!;
    private MudNumericField<int> _restField = default!;
    private MudBooleanInput<bool> _isFinalField = default!;
    private LoopFormModel _model { get; set; } = new();

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.Distance), () => _distanceField);
        RegisterInjector(nameof(_model.Recovery), () => _recoveryField);
        RegisterInjector(nameof(_model.Rest), () => _restField);
        //RegisterInjector(nameof(_model.IsFinal), () => _isFinalField);
    }

    public override void SetUpdateModel(Loop loop)
    {
        _model = new LoopFormModel(loop);
    }

    public override Loop SubmitCreate()
    {
        return Loop.Create(_model.Distance,_model.Recovery,_model.Rest,_model.IsFinal);
    }

    public override Loop SubmitUpdate()
    {        
        return Loop.Update(_model.Id, _model.Distance, _model.Recovery, _model.Rest, _model.IsFinal);
    }
}