@using NTS.Domain.Enums;
@using NTS.Domain.Setup.Entities;
@using NTS.Judge.Blazor.Setup.Officials;
@using Not.Blazor.Forms;
@using Not.Blazor.TM.Forms;
@using Not.Blazor.TM.Forms.Components;
@using Not.Blazor.TM.Models;
@using Not.Blazor.TM;

@inherits NotForm<Official>;

<EditForm Model="_model">
    <MudTextField @ref="_nameField" @bind-Value="_model.Name" Label="@Localizer.Get("Name")" />
    <NotSelect @ref="_roleField" T = "OfficialRole"
               Items="_items" @bind-Value="_model.Role"
               Label="@Localizer.Get("Official Role")" Placeholder="@Localizer.Get("Select a role")"/>
</EditForm>

@code {
    private object _test = default!;
    private MudTextField<string?> _nameField = default!;
    private NotSelect<OfficialRole> _roleField = default!;
    private OfficialFormModel _model { get; set; } = new();

    private IEnumerable<NotListModel<OfficialRole>> _items = NotListModel.FromEnum<OfficialRole>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public override void RegisterValidationInjectors()
    {
        RegisterInjector(nameof(_model.Name), () => _nameField);
        // RegisterInjector(nameof(_model.Role), () => _roleField);
    } 

    public override void SetUpdateModel(Official official)
    {
        _model = new OfficialFormModel(official);
    }

    public override Official SubmitCreate()
    {
        return Official.Create(_model.Name!, _model.Role);
    }

    public override Official SubmitUpdate()
    {
        return Official.Update(_model.Id!.Value, _model.Name!, _model.Role);
    }
}
