@using NTS.Judge.Blazor.Ports
@using NTS.Domain.Core.Entities
@using Not.Events

@inherits NotComponent;

@* //TODO: probably extract this chipset into NotChipGroup component or something similar. Also used in DashboardComponent *@
<MudChipSet @ref="_chipSet" SelectedChipChanged="x => _behind.SelectRanking((int)x.Value)">
    @foreach (var grouping in _rankingsByDistance)
    {
        <MudText Class="pl-4"><strong>@($"{grouping.Key}")</strong></MudText>
        <MudDivider />
        @foreach (var ranking in grouping.OrderBy(x => x.Category))
        {
            <MudChip Text="@ranking.Category.ToString()" Value="@ranking.Id" Color="Color.Primary" Style="min-width: 1rem" />
        }
    }
</MudChipSet>

@code {
    private MudChipSet _chipSet = default!;
    private MudChip? _selectedChip;
    private IEnumerable<IGrouping<string, Ranking>> _rankingsByDistance = Enumerable.Empty<IGrouping<string, Ranking>>();

    [Inject]
    public IRanklistBehind _behind { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Observe(_behind);

        var rankings = await _behind.GetRankings();
        _rankingsByDistance = rankings.GroupBy(x => x.Name);
        if (rankings.Any())
        {
            await _behind.SelectRanking(rankings.First().Id);
        }
    }
}
