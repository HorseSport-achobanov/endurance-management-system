@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Core.Entities
@using NTS.Domain.Objects
@using NTS.Judge.Blazor.Pages.Dashboard.Components

<RanklistTableFrame>
    <One>
        @if (_notQualified != null)
        {
            <MudText Typo="Typo.caption" Class="mr-4 pl-2" Style="width: 1rem;">@_notQualified</MudText>
            <MudIcon Icon="@Icons.Material.TwoTone.Flag" Color="Color.Error" Size="Size.Large" />
        }
        else if (Entry.Participation.Phases.Any(x => !x.IsComplete))
        {
            <MudIcon Icon="@Icons.Material.TwoTone.Flag" Color="Color.Default" Size="Size.Large" />
        }
        else
        {
            <MudText Class="mr-4 pl-2" Style="width: 1rem;">@_rank</MudText>
            <MudIcon Icon="@Icons.Material.Filled.Flag" Color="Color.Success" Size="Size.Large" />
        }
    </One>
    <Two>
        <MudStack>
            <MudItem>
                <MudText><strong>@_tandem.Number</strong> @_tandem.Name</MudText>
            </MudItem>
            <MudItem>
                <MudText>@_tandem.Horse</MudText>
            </MudItem>
        </MudStack>
    </Two>
    <Three>
        @_currentPhase?.ArriveTime
    </Three>
    <Four>
        @Entry.Participation.Total?.AverageSpeed
    </Four>
    <Five>
        @Entry.Participation.Total?.RideInterval
    </Five>
    <Six>
        @Entry.Participation.Total?.RecoveryIntervalWithoutFinal
    </Six>
    <Seven>
        @_totalInterval
    </Seven>
    <Eight>
        <MudIcon Icon="@(_expanded ? Icons.Material.Filled.KeyboardArrowDown : @Icons.Material.Filled.KeyboardArrowRight)"
                 @onclick="Toggle"
                 Style="width:100%; cursor:pointer;" />
    </Eight>
</RanklistTableFrame>
<MudCollapse Expanded="_expanded">
    <MudDivider />
    <ParticipationTable Phases="Entry.Participation.Phases" />
</MudCollapse>

@code {
    private bool _expanded;
    private Tandem _tandem => Entry.Participation.Tandem;
    private NotQualified? _notQualified => Entry.Participation.NotQualified;
    private Phase? _currentPhase => Entry.Participation.Phases.CurrentComplete;
    private string? _rank;
    private TimeInterval? _totalInterval => Entry.Participation.Total?.RideInterval + Entry.Participation.Total?.RecoveryIntervalWithoutFinal;

    [Parameter]
    public RankingEntry Entry { get; set; } = default!;
    [Parameter]
    public int Index { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (!Entry.IsRanked)
        {
            _rank = "unranked";
            return;
        }
        if (Entry.Participation.IsNotQualified)
        {
            _rank = null;
            return;
        }
        _rank = (Index + 1).ToString();
    }

    private void Toggle()
    {
        _expanded = !_expanded;
    }
}
