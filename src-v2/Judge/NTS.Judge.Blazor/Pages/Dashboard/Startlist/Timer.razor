@using System.Timers
@using System.Diagnostics
@inherits NotComponent
@implements IDisposable

<div style="@($"color:{@_color};")">
   @_displayTime
</div>

@code {
    [Parameter]
    public TimeSpan StartTime { get; set; } = default!;
    [Parameter]
    public double StopTimerAtTime { get; set; } = default!;

    TimeSpan TimerRefreshTime = TimeSpan.FromSeconds(1);

    private Timer _timer = default!;
    private MudTheme _theme = new MudTheme();
    private TimeSpan _time = default!;
    private string _displayTime = default!;
    private string _color = default!;

    protected override void OnInitialized()
    {
        _timer = new Timer(TimerRefreshTime);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = (_time > TimeSpan.FromMinutes(StopTimerAtTime));
    }

    protected override void OnParametersSet()
    {
        var now = DateTime.Now.TimeOfDay;
        _time = StartTime - now;
        FormatTime();
        _timer.Enabled = _time > TimeSpan.FromMinutes(StopTimerAtTime);
    }

    private async void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        _time = _time.Subtract(TimerRefreshTime);
        FormatTime();
        if (_time <= TimeSpan.FromMinutes(StopTimerAtTime))
        {
            _timer.Enabled = false;
        }
        await Render();
    }

    private void FormatTime()
    {        
        var day = DateOnly.FromDateTime(DateTime.Now);
        if (_time >= TimeSpan.Zero)
        {
            var time = TimeOnly.FromTimeSpan(_time);
            _displayTime = new DateTime(day, time).ToString("HH:mm:ss");
        }
        else
        {
            var positiveSignedTime = _time.Negate();
            var time = TimeOnly.FromTimeSpan(positiveSignedTime);
            _displayTime = new DateTime(day, time).ToString("HH:mm:ss");
            if(_time <= TimeSpan.FromSeconds(-1)){
                _displayTime = " - " + _displayTime;
            }
        }
        if (_time > TimeSpan.FromMinutes(5))
        {
            _color = _theme.PaletteLight.Success.Value;
        }
        else if (_time > TimeSpan.FromMinutes(0))
        {
            _color = _theme.PaletteLight.Warning.Value;
        }
        else
        {
            _color = _theme.PaletteLight.Error.Value;
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}