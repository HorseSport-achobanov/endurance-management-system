@using NTS.Domain.Core.Objects
@using NTS.Judge.Blazor.Ports
@using System.Collections
@using Not.Blazor.TM
@using Not.Extensions

@inherits NotComponent

@if (Items.Count() == 0)
{
    <MudText Typo="Typo.body1">There aren't any upcoming starts at the moment.</MudText>
}
else
{
    <MudTabs @ref="@Tabs" PanelClass="px-4 py-6" Elevation="4" Rounded ApplyEffectsToContainer>
        @foreach (var tab in UserTabs)
        {
            <MudTabPanel ID="@tab.Id" Text="@tab.Label">
                <ChildContent>
                    <MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
                        <thead>
                            <tr>
                                @foreach (var h in headings)
                                {
                                    <th>@h</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Items)
                            {
                                @if(tab.Label.Contains(row.TotalDistance.ToString())){
                                    <tr>
                                        @foreach (var x in row.ToString().Split(", "))
                                        {
                                            <td>@x</td>
                                        }
                                        <td><NotTimer StartTime="@row.StartIn()" StopTimerAtTime="-15" /></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </MudSimpleTable>
                </ChildContent>
            </MudTabPanel>
        }
    </MudTabs>
}
  


@code {
    [Parameter]
    public IEnumerable<Start> Items { get; set; } = new List<Start>();

    MudTabs Tabs = default!;
    List<TabView> UserTabs = new();
    int UserIndex;
    bool dense = false;
    bool hover = false;
    bool bordered = false;
    bool striped = false;
    Color color = Color.Primary;
    string[] headings = { "Number", "Athlete", "Loop", "Start Time", "Start In" };

    protected override void OnParametersSet()
    {
        foreach (var start in Items)
        {
            TabView tab = new TabView();
            tab.Label = $"{start.TotalDistance} {@Localizer.Get("KM")}";
            tab.Id = Guid.NewGuid();
            if (!UserTabs.Any(t => t.Label == tab.Label))
            {
                UserTabs.Add(tab);
            }
        }
    }
}