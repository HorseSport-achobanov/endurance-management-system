@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Setup.Entities
@using NTS.Judge.Blazor.Pages.Dashboard.Components
@using NTS.Judge.Blazor.Ports
 
@attribute [Route(DASHBOARD_PAGE)]
@inherits NotComponent

<NotH1>@Localizer.Get("Dashboard")</NotH1>

<MudButton OnClick="@(() => _snackbar.Add("Kur", Severity.Info))">info</MudButton>
<MudButton OnClick="@(() => _snackbar.Add("Zelen", Severity.Success))">success</MudButton>
<MudButton OnClick="@(() => _snackbar.Add("Jalt", Severity.Warning))">warn</MudButton>
<MudButton OnClick="@(() => _snackbar.Add("Cherven", Severity.Error))">errrrrrr</MudButton>

@if (!_participationBehind.Participations.Any())
{
    <NotH2>@Localizer.Get("No participations")</NotH2>
    <InputFile OnChange="ImportEmsData" />
}
else
{
    <DashboardComponent />
}

@code {
    [Inject]
    ISnackbar _snackbar { get; set; } = default!;
    [Inject]
    private IEmsImportBehind _importBehind { get; set; } = default!;
    [Inject]
    private IParticipationBehind _participationBehind { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await _participationBehind.Initialize();
    }

    private async Task ImportEmsData(InputFileChangeEventArgs args)
    {
        using var stream = args.File.OpenReadStream();
        using var stringReader = new StreamReader(stream);
        var contents = await stringReader.ReadToEndAsync();
        await _importBehind.ImportCore(contents);
    }
}
