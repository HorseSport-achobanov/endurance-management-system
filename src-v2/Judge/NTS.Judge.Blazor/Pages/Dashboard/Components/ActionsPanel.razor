@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Objects
@using NTS.Domain.Core.Entities
@using NTS.Judge.Blazor.Pages.Dashboard.Components.Actions
@using NTS.Judge.Blazor.Ports
@using NTS.Judge.Blazor.Enums
@using Not.Structures
@using Not.Blazor.TM
@using Not.Events

@inherits NotComponent

<h3>Actions</h3>

@{
    //BeforeRender();
}

<MudPaper Class="d-flex flex-column half-width" Elevation="0">
    <ManualTimeSnapshot />

    <InspectionsPanel />

    <EliminationsPanel/>
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;
    Participation _selectedParticipation { get; set; } = default!;
    NotQualified _notQualified { get; set; } = default!;
    Phase _currentPhase { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    // public void BeforeRender()
    // {
    //     _selectedParticipation = _participationBehind.SelectedParticipation;
    //     _notQualified = _selectedParticipation.NotQualified;
    //     _currentPhase = _selectedParticipation.Phases.Current;
    //     TimeValue = "00:00:00";
    //     ReinspectionToggled = _currentPhase?.IsReinspectionRequested ?? false;
    //     RequiredInspectionToggled = _currentPhase?.IsRIRequested ?? false;
    //     switch (_notQualified)
    //     {
    //         case Withdrawn:
    //             ToggleGroupSelection = "Withdrawn";
    //             _reasonExpanded = false;
    //             _multiSelectReasonExpanded = false;
    //             break;
    //         case Retired:
    //             ToggleGroupSelection = "Retired";
    //             _reasonExpanded = false;
    //             _multiSelectReasonExpanded = false;
    //             break;
    //         case FinishedNotRanked:
    //             ToggleGroupSelection = "FinishedNotRanked";
    //             Reason = _notQualified.Complement!;
    //             _reasonExpanded = true;
    //             _multiSelectReasonExpanded = false;
    //             break;
    //         case Disqualified:
    //             ToggleGroupSelection = "Disqualified";
    //             Reason = _notQualified.Complement!;
    //             _reasonExpanded = true;
    //             _multiSelectReasonExpanded = false;
    //             break;
    //         case FailedToQualify:
    //             ToggleGroupSelection = "FailedToQualify";
    //             FTQReasonValue = _notQualified.ToString();
    //             FTQReasonValue = FTQReasonValue.Replace("FTQ ", "");
    //             _reasonExpanded = false;
    //             _multiSelectReasonExpanded = true;
    //             if (FTQReasonValue.Contains("FTC"))
    //             {
    //                 Reason = _selectedParticipation?.NotQualified.Complement!;
    //                 _reasonExpanded = true;
    //             }
    //             break;
    //     }
    // }
}
