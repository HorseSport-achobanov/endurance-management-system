@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Pages.Dashboard;

@inherits NotComponent

<table class="rtable @_axisClass">
  <thead>
    <tr>
      <th>Gate</th>
      <th>Start</th>
      <th>Arrive</th>
      <th>VetIn</th>
      <th>ReIn</th>
      <th>RI Time</th>
      <th>CRI Time</th>
      <th><strong>Out</strong></th>
      <th>Recovery</th>
      <th>Loop Time</th>
      <th>Phase Time</th>
      <th>Time</th>
      <th>Loop Avrg</th>
      <th>Phase Avrg</th>
      <th>Speed Avrg</th>
    </tr>
  </thead>
  <tbody>
        @foreach (var phase in Participations.FirstOrDefault()?.Phases ?? Enumerable.Empty<Phase>())
        {
            <tr>
                <td>@phase.Gate.OrDefault()</td>
                <td>@phase.StartTime.OrDefault()</td>
                <td>@phase.ArriveTime.OrDefault()</td>
                <td>@phase.InspectTime.OrDefault()</td>
                <td>@phase.ReinspectTime.OrDefault()</td>
                <td>@(phase.IsCRIRequested ? NullableExtensions.DEFAULT : phase.RequiredInspectionTime.OrDefault())</td>
                <td>@(phase.IsCRIRequested ? phase.RequiredInspectionTime : NullableExtensions.DEFAULT)</td>
                <td>@phase.OutTime.OrDefault()</td>
                <td>@phase.RecoverySpan.OrDefault()</td>
                <td>@phase.LoopSpan.OrDefault()</td>
                <td>@phase.PhaseSpan.OrDefault()</td>
                <td>@phase.Span.OrDefault()</td>
                <td>@phase.AveregeLoopSpeed.OrDefault()</td>
                <td>@phase.AveragePhaseSpeed.OrDefault()</td>
                <td>@phase.AverageSpeed.OrDefault()</td>
            </tr>
        }
  </tbody>
</table>

<MudButton OnClick="FlipAxis">Flip</MudButton>

@code {
    private const string FLIPPED_AXIS_CLASS = "rtable--flip";
    private string _axisClass = "";

    [Parameter]
    public IEnumerable<Participation> Participations { get; set; } = new List<Participation>();

    private void FlipAxis()
    {
        if (_axisClass == FLIPPED_AXIS_CLASS)
        {
            _axisClass = "";
        }
        else
        {
            _axisClass = FLIPPED_AXIS_CLASS;
        }
    }
}

<style>
    /*!
    // CSS only Responsive Tables
    // http://dbushell.com/2016/03/04/css-only-responsive-tables/
    // by David Bushell
    */

    .rtable {
      /*!
      // IE needs inline-block to position scrolling shadows otherwise use:
      // display: block;
      // max-width: min-content;
      */
        display: inline-block;
        vertical-align: top;
        max-width: 100%;
        overflow-x: auto;
        // optional - looks better for small cell values white-space: nowrap;
        border-collapse: collapse;
        border-spacing: 0;
    }

    .rtable,
    .rtable--flip tbody {
        /* optional - enable iOS momentum scrolling -webkit-overflow-scrolling: touch;
        // scrolling shadows background: radial-gradient(left, ellipse, rgba(0,0,0, .2) 0%, rgba(0,0,0, 0) 75%) 0 center, radial-gradient(right, ellipse, rgba(0,0,0, .2) 0%, rgba(0,0,0, 0) 75%) 100% center;
        */
        background-size: 10px 100%, 10px 100%;
        background-attachment: scroll, scroll;
        background-repeat: no-repeat;
    }

        /* change these gradients from white to your background colour if it differs
        // gradient on the first cells to hide the left shadow
        */
        .rtable td:first-child,
        .rtable--flip tbody tr:first-child {
            background-image: linear-gradient(to right, rgba(255,255,255, 1) 50%, rgba(255,255,255, 0) 100%);
            background-repeat: no-repeat;
            background-size: 20px 100%;
        }

        /* gradient on the last cells to hide the right shadow */
        .rtable td:last-child,
        .rtable--flip tbody tr:last-child {
            background-image: linear-gradient(to left, rgba(255,255,255, 1) 50%, rgba(255,255,255, 0) 100%);
            background-repeat: no-repeat;
            background-position: 100% 0;
            background-size: 20px 100%;
        }

        .rtable th {
            font-size: 11px;
            text-align: left;
            text-transform: uppercase;
            background: #f2f0e6;
        }

        .rtable th,
        .rtable td {
            padding: 6px 12px;
            border: 1px solid #d9d7ce;
            min-width: 110px;
        }

    .rtable--flip {
        display: flex;
        overflow: hidden;
        background: none;
    }

        .rtable--flip thead {
            display: flex;
            flex-shrink: 0;
            min-width: min-content;
        }

        .rtable--flip tbody {
            display: flex;
            position: relative;
            overflow-x: auto;
            overflow-y: hidden;
        }

        .rtable--flip tr {
            display: flex;
            flex-direction: column;
            min-width: min-content;
            flex-shrink: 0;
        }

        .rtable--flip td,
        .rtable--flip th {
            display: block;
        }

        .rtable--flip td {
            background-image: none !important;
            /* border-collapse is no longer active border-left: 0; */
        }

            /* border-collapse is no longer active */
            .rtable--flip th:not(:last-child),
            .rtable--flip td:not(:last-child) {
                border-bottom: 0;
            }

    /*!
    // CodePen house keeping
    */

    body {
        margin: 0;
        padding: 25px;
        color: #494b4d;
        font-size: 14px;
        line-height: 20px;
    }

    h1, h2, h3 {
        margin: 0 0 10px 0;
        color: #1d97bf;
    }

    h1 {
        font-size: 25px;
        line-height: 30px;
    }

    h2 {
        font-size: 20px;
        line-height: 25px;
    }

    h3 {
        font-size: 16px;
        line-height: 20px;
    }

    table {
        margin-bottom: 30px;
    }

    a {
        color: #ff6680;
    }

    code {
        background: #fffbcc;
        font-size: 12px;
    }
</style>