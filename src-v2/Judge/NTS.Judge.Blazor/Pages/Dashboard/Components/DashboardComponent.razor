@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Core.Events
@using NTS.Judge.Blazor.Pages.Dashboard;
@using NTS.Judge.Blazor.Ports
@using Not.Blazor.TM
@using Not.Concurrency
@using Not.Events

@inherits NotComponent

<MudGrid Spacing="5" Style="margin-top:0;"> @* TODO: extract NotGrid? style's necessary because Spacing does -40% margin style for some reason, which breaks the vertical layout. *@
    <MudItem xs="12">
        <NotAutocomplete T="Participation" @bind-Value="_behind.SelectedParticipation" Search="Search" Class="mb-2 dashboard-autocomplete" />
    </MudItem>
    <MudItem xs="3">
        <MudChipSet @bind-SelectedValue="_behind.SelectedParticipation" SelectionMode="SelectionMode.SingleSelection">
            @foreach (var grouping in _behind.Participations.GroupBy(x => x.Phases.Distance)) // TODO: move grouping in field
            {
                <MudText Class="pl-4"><strong>@($"{grouping.Key} {@Localizer.Get("KM")}")</strong></MudText>
                <MudDivider /> 
                @foreach (var participation in grouping.OrderBy(x => x.Tandem.Number))
                {
                    var number = participation.Tandem.Number;
                    var color = participation.IsNotQualified() ? Color.Error : Color.Primary;
                    // TODO: Update Mudblazor and use bind-Selected: https://mudblazor.com/components/chipset#binding-chips-in-a-selection
                    <MudChip Text="@number.ToString()" Value="@participation" Color="@color" Style="min-width: 1rem" />
                }
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="9">
        <ParticipationTable Phases="_behind.SelectedParticipation?.Phases" />
    </MudItem>
</MudGrid>

@code {
    [Inject]
    private IParticipationBehind _behind { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_behind);
    }

    private Task<IEnumerable<Participation>> Search(string term)
    {
        if (string.IsNullOrEmpty(term))
        {
            return Task.FromResult(_behind.Participations);
        }
        var result = _behind.Participations.Where(x => x.ToString().ToLower().Contains(term.ToLower()));
        return Task.FromResult(result);
    }
}

<style>
    .dashboard-autocomplete .mud-select-input {
        margin-top: 0 !important;
    }
    .dashboard-autocomplete input {
        font-size: 1.5rem !important;
    }
    .dashboard-autocomplete label {
        font-size: 1.25rem !important;
    }
</style>