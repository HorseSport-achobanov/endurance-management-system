@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Objects
@using NTS.Domain.Core.Entities
@using NTS.Judge.Blazor.Ports
@using NTS.Judge.Blazor.Enums
@using Not.Blazor.TM.Models
@using Not.Blazor.TM
@using Not.Events

@inherits NotComponent

<h3>Actions</h3>

@{
    BeforeRender();
}

<MudPaper Class="d-flex flex-column half-width" Elevation="0">
    <MudPaper Class="d-flex flex-column mb-4" Elevation="0">
        <MudTextField @ref="timeInput" @bind-Value="TimeValue" T="string" Label="Time" Mask="@(new PatternMask("00:00:00"))" Class="one-third-width" />
    </MudPaper>
    <MudPaper Class="d-flex flex-row mb-4" Elevation="0">
        @* <MudButton Class="@ReinspectionClasses" Variant="Variant.Filled" 
                StartIcon="@Icons.Material.Filled._360" Color="Color.Error" 
                @ref="reinspectionButton" OnClick="ToggleReinspection">
            Reinspection
        </MudButton>
        <MudButton Class="@ReqInsClasses" Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.HourglassEmpty" Color="Color.Primary"
                   @ref="reqInsButton" OnClick="ToggleReqIns">
            Required Inspection
        </MudButton> *@
    </MudPaper>
    <MudPaper Class="d-flex flex-column mb-2" Elevation="0">
        <MudToggleGroup @ref="toggleGroup" T="string" TextClass="@SmallTextClass" Delimiters="true" Color="Color.Error" Rounded="true"
            SelectionMode="SelectionMode.ToggleSelection" Style="width: 20rem" ValueChanged="OnToggle" Value="ToggleGroupSelection">
            <MudToggleItem Text="Withdrawn" Value="@("Withdrawn")" />
            <MudToggleItem Text="Retired" Value="@("Retired")" />
            <MudToggleItem Text="Finished Not Ranked" Value="@("FinishedNotRanked")" />
            <MudToggleItem Text="Disqualified" Value="@("Disqualified")" />
            <MudToggleItem Text="Failed to Qualify" Value="@("FailedToQualify")" />
        </MudToggleGroup>
        <MudSelect @ref="multiSelect" T="string" Class="@MultiSelectClasses" Label="Failed to Qualify Reason" MultiSelection="true" Delimiter="+" @bind-Value="@FTQReasonValue" Placeholder="Select a reason">
            @foreach (var failToQualifyCode in MultiSelectListModel.MultiSelectList<FTQCodes>())
            {
                <MudSelectItem T="string" Value="@failToQualifyCode.Value">
                    @failToQualifyCode.Value
                    <div class="font-size-10">@failToQualifyCode.Description</div>
                </MudSelectItem>
            }
        </MudSelect>
        <MudTextField @ref="reasonInput" @bind-Value="Reason" Class="@ReasonClasses" Label="Reason" Variant="Variant.Outlined"></MudTextField>
    </MudPaper>

    <MudButton Class="mt-4 one-third-width" Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">
        @Localizer.Get("Update")
    </MudButton>
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;
    Participation _selectedParticipation { get; set; } = default!;
    NotQualified _notQualified { get; set; } = default!;
    Phase _currentPhase { get; set; } = default!;

    private MudTextField<string> timeInput = default!;
    private MudToggleGroup<string> toggleGroup = default!;
    private MudTextField<string> reasonInput = default!;
    private MudSelect<string> multiSelect = default!;
    private string TimeValue = default!;
    private bool ReinspectionToggled = false;
    private bool ReqInsToggled = false;
    private string ToggleGroupSelection = "";
    private string SmallTextClass = "font-size-10";
    private string ReasonClasses = "hidden";
    private string MultiSelectClasses = "hidden";
    private string Reason = "";
    private string FTQReasonValue = "";

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    public void BeforeRender()
    {
        _selectedParticipation = _participationBehind.SelectedParticipation;
        _notQualified = _selectedParticipation.NotQualified;
        _currentPhase = _selectedParticipation.Phases.Current;
        ReinspectionToggled = _currentPhase?.IsReinspectionRequested ?? false;
        ReqInsToggled = _currentPhase?.IsRIRequested ?? false;
        switch (_notQualified)
        {
            default:
                ToggleGroupSelection = "";
                ReasonClasses = "hidden";
                MultiSelectClasses = "hidden";
                break;
            case Withdrawn:
                ToggleGroupSelection = "Withdrawn";
                ReasonClasses = "hidden";
                MultiSelectClasses = "hidden";
                break;
            case Retired:
                ToggleGroupSelection = "Retired";
                ReasonClasses = "hidden";
                MultiSelectClasses = "hidden";
                break;
            case FinishedNotRanked:
                ToggleGroupSelection = "FinishedNotRanked";
                Reason = _notQualified.Complement!;
                ReasonClasses = "";
                MultiSelectClasses = "hidden";
                break;
            case Disqualified:
                ToggleGroupSelection = "Disqualified";
                Reason = _notQualified.Complement!;
                ReasonClasses = "";
                MultiSelectClasses = "hidden";
                break;
            case FailedToQualify:
                ToggleGroupSelection = "FailedToQualify";
                FTQReasonValue = _notQualified.ToString();
                FTQReasonValue = FTQReasonValue.Replace("FTQ ", "");
                MultiSelectClasses = "";
                ReasonClasses = "hidden";
                break;
        }
    }

    private async void ToggleReinspection(bool value)
    {
        _participationBehind.SelectedParticipation?.IsReinspectionRequested(value);
        await InvokeAsync(StateHasChanged); // TODO test without as it should re-render on its own
    }

    private async void ToggleReqIns(bool value)
    {
        _participationBehind.SelectedParticipation?.IsRIRequested(value);
        await InvokeAsync(StateHasChanged); // TODO test without
    }

    public void AddInput(ref string inputClass)
    {
        if (inputClass.Length > 0)
        {
            inputClass = "";
        }
        else
        {
            inputClass = "hidden";
            Reason = "";
        }
        InvokeAsync(StateHasChanged);
    }

    private void HideInput()
    {
        ReasonClasses = "hidden";
        MultiSelectClasses = "hidden";
    }

    public void OnToggle(string value)
    {
        HideInput();
        if(value == "FinishedNotRanked" || value == "Disqualified")
        {
            AddInput(ref ReasonClasses);
        }
        else if(value == "FailedToQualify")
        {
            AddInput(ref MultiSelectClasses);   
        }
        ToggleGroupSelection = value;
    }

    public async Task UpdateParticipant()
    {
        if (_participationBehind.SelectedParticipation == null)
        {
            return;
        }
        var tandemNumber = _participationBehind.SelectedParticipation.Tandem.Number;

        if (ToggleGroupSelection == "Withdrawn")
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.Withdraw);
        }
        else if (ToggleGroupSelection == "Retired")
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.Retire);
        }
        else if (ToggleGroupSelection == "FinishedNotRanked")
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FinishNotRanked, reasonInput.Value);
        }
        else if (ToggleGroupSelection == "Disqualified")
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.Disqualify, reasonInput.Value);
        }
        else if (ToggleGroupSelection == "FailedToQualify")
        {
            var multiselect_values = multiSelect.SelectedValues;
            List<FTQCodes> codes = new List<FTQCodes>();
            foreach(var value in multiselect_values)
            {
                codes.Add((FTQCodes)Enum.Parse(typeof(FTQCodes), value));
            }
            if (codes.Contains(FTQCodes.FTC) && (Reason==null || Reason==""))
            {
                AddInput(ref ReasonClasses);
                return;
            }else if (codes.Contains(FTQCodes.FTC))
            {
                await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FailToCompleteLoop, Reason, codes.ToArray());
            }
            else if (!codes.Contains(FTQCodes.FTC))
            {
                HideInput();
                await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FailToQualify, null, codes.ToArray());
            }  
        }
        else
        {
            await _participationBehind.RestoreQualification(tandemNumber);
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task Update()
    {
        var participation = _participationBehind.SelectedParticipation;
        if (participation == null)
        {
            return;
        }

        var snapshot = CreateSnapshot();
        var convertedInput = TimeSpan.Parse(TimeValue);
        snapshot.Timestamp.SetTime(convertedInput);
        _participationBehind?.Process(snapshot);
        await UpdateParticipant();
    }

    public Snapshot CreateSnapshot()
    {
        var participation = _participationBehind.SelectedParticipation;
        var currentPhase = participation!.Phases.Current;

        SnapshotType snapshotType;
        SnapshotMethod snapshotMethod = SnapshotMethod.Manual;
        if (currentPhase?.ArriveTime == null)
        {
            snapshotType = SnapshotType.Stage;
        }
        else if (currentPhase.InspectTime == null && currentPhase.IsFinal == false)
        {
            snapshotType = SnapshotType.Vet;
        }
        else
        {
            snapshotType = SnapshotType.Final;
        }
        Snapshot snapshot = new Snapshot(participation!.Tandem.Number, snapshotType, snapshotMethod, Timestamp.Now());
        return snapshot;
    }
}
