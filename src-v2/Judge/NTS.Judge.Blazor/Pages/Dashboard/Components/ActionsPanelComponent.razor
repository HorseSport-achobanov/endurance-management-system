@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Objects
@using NTS.Domain.Core.Entities
@using NTS.Judge.Blazor.Ports
@using NTS.Judge.Blazor.Enums
@using Not.Blazor.TM.Models
@using Not.Events

@inherits NotComponent

<h3>Actions</h3>

@{
    var participation = _participationBehind?.SelectedParticipation;
    var currentPhase = participation?.Phases.Current;
    var ReinspectionToggled = currentPhase?.IsReinspectionRequested ?? false;
    var ReqInsToggled = currentPhase?.IsRIRequested ?? false;

    var notQualified = participation?.NotQualified;
    if (_shouldResetNotQualifiedSelection)
    {
        switch (notQualified)
        {
            default:
                WitToggled = RetToggled = FNRToggled = DQToggled = FTQToggled = false;
                WitClasses = RetClasses = FNRClasses = DQClasses = FTQClasses = "font-size-10";
                ReasonClasses = "hidden";
                MultiSelectClasses = "hidden";
                break;
            case Withdrawn:
                WitToggled = true;
                WitClasses = "font-size-10 secondary-outlined-toggled";
                RetClasses = FNRClasses = DQClasses = FTQClasses = "font-size-10";
                ReasonClasses = "hidden";
                MultiSelectClasses = "hidden";
                break;
            case Retired:
                RetToggled = true;
                RetClasses = "font-size-10 secondary-outlined-toggled";
                WitClasses = FNRClasses = DQClasses = FTQClasses = "font-size-10";
                ReasonClasses = "hidden";
                MultiSelectClasses = "hidden";
                break;
            case FinishedNotRanked:
                FNRToggled = true;
                FNRClasses = "font-size-10 secondary-outlined-toggled";
                WitClasses = RetClasses = DQClasses = FTQClasses = "font-size-10";
                Reason = notQualified.Complement!;
                ReasonClasses = "";
                MultiSelectClasses = "hidden";
                break;
            case Disqualified:
                DQToggled = true;
                DQClasses = "font-size-10 secondary-outlined-toggled";
                WitClasses = RetClasses = FNRClasses = FTQClasses = "font-size-10";
                Reason = notQualified.Complement!;
                ReasonClasses = "";
                MultiSelectClasses = "hidden";
                break;
            case FailedToQualify:
                FTQToggled = true;
                FTQClasses = "font-size-10 secondary-outlined-toggled";
                WitClasses = RetClasses = FNRClasses = DQClasses = "font-size-10";
                MultiSelectClasses = "";
                ReasonClasses = "hidden";
                FTQReasonValue = notQualified.ToString();
                FTQReasonValue = FTQReasonValue.Replace("FTQ ", "");
                break;
        }
    }

    void ToggleButtonOfGroup(ref bool toggledButton, ref string className)
    {
        if (toggledButton)
        {
            className = "font-size-10";
            toggledButton = false;
        }
        else
        {
            WitClasses = RetClasses = FNRClasses = DQClasses = FTQClasses = "font-size-10";
            className = "font-size-10 secondary-outlined-toggled";
            toggledButton = true;
            _shouldResetNotQualifiedSelection = false;
        }
        HideInput();
    }
}

<MudPaper Class="d-flex flex-column half-width" Elevation="0">
    <MudPaper Class="d-flex flex-column mb-4" Elevation="0">
        <MudTextField @ref="timeInput" @bind-Value="Time" T="string" Label="Time" Mask="@(new PatternMask("00:00:00"))" Class="one-third-width" />
    </MudPaper>
    <MudPaper Class="d-flex flex-row mb-4" Elevation="0">
        @* <MudButton Class="@ReinspectionClasses" Variant="Variant.Filled" 
                StartIcon="@Icons.Material.Filled._360" Color="Color.Error" 
                @ref="reinspectionButton" OnClick="ToggleReinspection">
            Reinspection
        </MudButton>
        <MudButton Class="@ReqInsClasses" Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.HourglassEmpty" Color="Color.Primary"
                   @ref="reqInsButton" OnClick="ToggleReqIns">
            Required Inspection
        </MudButton> *@
    </MudPaper>
    <MudPaper Class="d-flex flex-column mb-2" Elevation="0">
        <MudButtonGroup Color="Color.Secondary" Size="Size.Medium" Variant="Variant.Outlined">
            <MudButton Class="@WitClasses" OnClick="() => ToggleButtonOfGroup(ref WitToggled, ref WitClasses)">Witdrawn</MudButton>
            <MudButton Class="@RetClasses" OnClick="() => ToggleButtonOfGroup(ref RetToggled, ref RetClasses)">Retired</MudButton>
            <MudButton Class="@FNRClasses" OnClick="() => { ToggleButtonOfGroup(ref FNRToggled, ref FNRClasses); AddInput(ref ReasonClasses); }">Finished Not Ranked</MudButton>
            <MudButton Class="@DQClasses" OnClick="() => { ToggleButtonOfGroup(ref DQToggled, ref DQClasses); AddInput(ref ReasonClasses); }">Disqualified</MudButton>
            <MudButton Class="@FTQClasses" OnClick="() => { ToggleButtonOfGroup(ref FTQToggled, ref FTQClasses); AddInput(ref MultiSelectClasses); }">Failed to Qualify</MudButton>
        </MudButtonGroup>
        <MudSelect @ref="multiSelect" T="string" Class="@MultiSelectClasses" Label="Failed to Qualify Reason" MultiSelection="true" Delimiter="+" @bind-Value="@FTQReasonValue" Placeholder="Select a reason">
            @foreach (var failToQualifyCode in MultiSelectListModel.MultiSelectList<FTQCodes>())
            {
                <MudSelectItem T="string" Value="@failToQualifyCode.Value">
                    @failToQualifyCode.Value
                    <div class="font-size-10">@failToQualifyCode.Description</div>
                </MudSelectItem>
            }
        </MudSelect>
        <MudTextField @ref="reasonInput" @bind-Value="Reason" Class="@ReasonClasses" Label="Reason" Variant="Variant.Outlined"></MudTextField>
    </MudPaper>

    <MudButton Class="mt-4 one-third-width" Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">
        @Localizer.Get("Update")
    </MudButton>
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;

    private MudTextField<string> timeInput = default!;
    private MudBaseButton reinspectionButton = default!;
    private MudButton reqInsButton = default!;
    private MudTextField<string> reasonInput = default!;
    private MudSelect<string> multiSelect = default!;
    private string Time { get; set; } = default!;
    private bool WitToggled = false;
    private bool RetToggled = false;
    private bool FNRToggled = false;
    private bool DQToggled = false;
    private bool FTQToggled = false;
    private string ReinspectionClasses = "mr-4 font-size-12";
    private string ReqInsClasses = "font-size-12";
    private string WitClasses = "font-size-10";
    private string RetClasses = "font-size-10";
    private string FNRClasses = "font-size-10";
    private string DQClasses = "font-size-10";
    private string FTQClasses = "font-size-10";
    private string ReasonClasses = "hidden";
    private string MultiSelectClasses = "hidden";
    private bool _shouldResetNotQualifiedSelection = true;

    private string Reason = "";
    private string FTQReasonValue = "";

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    private async void ToggleReinspection(bool value)
    {
        _participationBehind.SelectedParticipation?.IsReinspectionRequested(value);
        await InvokeAsync(StateHasChanged); // TODO test without as it should re-render on its own
    }

    private async void ToggleReqIns(bool value)
    {
        _participationBehind.SelectedParticipation?.IsRIRequested(value);
        await InvokeAsync(StateHasChanged); // TODO test without
    }

    public void AddInput(ref string inputClass)
    {
        if (inputClass.Length > 0)
        {
            inputClass = "";
        }
        else
        {
            inputClass = "hidden";
            Reason = "";
        }
        InvokeAsync(StateHasChanged);
    }

    public async Task UpdateParticipant()
    {
        if (_participationBehind.SelectedParticipation == null)
        {
            return;
        }
        var tandemNumber = _participationBehind.SelectedParticipation.Tandem.Number;

        if (WitToggled)
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.Withdraw);
        }
        else if (RetToggled)
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.Retire);
        }
        else if(FNRToggled)
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FinishNotRanked, reasonInput.Value);
        }
        else if (DQToggled)
        {
            await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.Disqualify, reasonInput.Value);
        }
        else if(FTQToggled)
        {
            var multiselect_values = multiSelect.SelectedValues;
            List<FTQCodes> codes = new List<FTQCodes>();
            foreach(var value in multiselect_values)
            {
                codes.Add((FTQCodes)Enum.Parse(typeof(FTQCodes), value));
            }
            if (codes.Contains(FTQCodes.FTC) && (Reason==null || Reason==""))
            {
                AddInput(ref ReasonClasses);
                return;
            }else if (codes.Contains(FTQCodes.FTC))
            {
                await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FailToCompleteLoop, Reason, codes.ToArray());
            }
            else if (!codes.Contains(FTQCodes.FTC))
            {
                HideInput();
                await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FailToQualify, null, codes.ToArray());
            }  
        }
        else
        {
            await _participationBehind.RestoreQualification(tandemNumber);
        }
        await InvokeAsync(StateHasChanged);
        _shouldResetNotQualifiedSelection = true;
    }

    private void HideInput()
    {
        ReasonClasses = "hidden";
        MultiSelectClasses = "hidden";
    }

    public async Task Update()
    {
        var participation = _participationBehind.SelectedParticipation;
        if (participation == null)
        {
            return;
        }

        var snapshot = CreateSnapshot();
        var convertedInput = TimeSpan.Parse(Time);
        snapshot.Timestamp.SetTime(convertedInput);
        _participationBehind?.Process(snapshot);
        await UpdateParticipant();
    }

    public Snapshot CreateSnapshot()
    {
        var participation = _participationBehind.SelectedParticipation;
        var currentPhase = participation!.Phases.Current;

        SnapshotType snapshotType;
        SnapshotMethod snapshotMethod = SnapshotMethod.Manual;
        if (currentPhase?.ArriveTime == null)
        {
            snapshotType = SnapshotType.Stage;
        }
        else if (currentPhase.InspectTime == null && currentPhase.IsFinal == false)
        {
            snapshotType = SnapshotType.Vet;
        }
        else
        {
            snapshotType = SnapshotType.Final;
        }
        Snapshot snapshot = new Snapshot(participation!.Tandem.Number, snapshotType, snapshotMethod, Timestamp.Now());
        return snapshot;
    }
}
