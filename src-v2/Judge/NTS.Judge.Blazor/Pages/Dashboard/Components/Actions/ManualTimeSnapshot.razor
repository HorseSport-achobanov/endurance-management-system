@using NTS.Domain.Objects
@using NTS.Judge.Blazor.Ports

@inherits NotComponent

<h4>Time Snapshot</h4>

<MudPaper Class="d-flex flex-row mb-4" Elevation="0">
    <MudTextField @bind-Value="TimeValue" T="string" Label="Time" Mask="@(new PatternMask("00:00:00"))" Class="one-third-width mr-2"/>
    <MudButtonGroup Color="Color.Tertiary" Size="Size.Small" Variant="Variant.Filled" VerticalAlign="true">
        <MudButton OnClick="SnapshotTime">Snapshot</MudButton>
        <MudButton OnClick="Send">Save</MudButton>
    </MudButtonGroup>
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;
    private const string NULL_TIME = "00:00:00";
    private string TimeValue = NULL_TIME;


    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    public void SnapshotTime()
    {
        var currentTime = DateTime.Now.TimeOfDay;
        TimeValue = currentTime.ToString();
    }

    public Snapshot CreateSnapshot(DateTime timeStampDateTime)
    {
        var timestamp = new Timestamp(timeStampDateTime);

        return new Snapshot(
            _participationBehind.SelectedParticipation!.Tandem.Number, 
           SnapshotType.Automatic,
           SnapshotMethod.Manual,
           timestamp);
    }

    public void Send()
    {
        if (TimeValue == NULL_TIME)
        {
            return;
        }

        var inputTime = TimeSpan.Parse(TimeValue);
        var time = DateTime.Today + inputTime;
        var timestamp = new Timestamp(time);
        var snapshot = new Snapshot(
            _participationBehind.SelectedParticipation!.Tandem.Number,
           SnapshotType.Automatic,
           SnapshotMethod.Manual,
           timestamp);
        _participationBehind.Process(snapshot);

        TimeValue = NULL_TIME;
    }
}
