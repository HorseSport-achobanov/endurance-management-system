@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Pages.Dashboard.Components.Actions.EliminationForms
@using NTS.Judge.Blazor.Ports
@using Not.Structures

@inherits NotComponent

<h4>Eliminations Panel</h4>

<MudPaper Class="d-flex flex-column mb-2" Elevation="0">
    <MudToggleGroup @ref="toggleGroup" T="string" TextClass="@SmallTextClass" Delimiters="true" Color="Color.Error" Rounded="true"
                    SelectionMode="SelectionMode.ToggleSelection" Style="width: 20rem" Value="_buttonValue" ValueChanged="OnToggle">
        <MudToggleItem Text="Withdrawn" Value="@(NotQualified.WITHDRAWN)" />
        <MudToggleItem Text="Retired" Value="@(NotQualified.RETIRED)" />
        <MudToggleItem Text="Finished Not Ranked" Value="@(NotQualified.FINISHED_NOT_RANKED)" />
        <MudToggleItem Text="Disqualified" Value="@(NotQualified.DISQUALIFIED)" />
        <MudToggleItem Text="Failed to Qualify" Value="@(NotQualified.FAILED_TO_QUALIFY)" />
    </MudToggleGroup>
    @if(_notQualified != null || _buttonValue != null)
    {
        <MudCollapse Expanded="@(_buttonValue == NotQualified.WITHDRAWN)" >
            <WithdrawForm Withdrawn="_notQualified as Withdrawn" OnSubmission="Untoggle" />
        </MudCollapse>
        <MudCollapse Expanded="@(_buttonValue == NotQualified.RETIRED)">
            <RetireForm Retired="_notQualified as Retired" OnSubmission="Untoggle" />
        </MudCollapse>
        <MudCollapse Expanded="@(_buttonValue == NotQualified.FINISHED_NOT_RANKED)">
            <FinishNotRankedForm FinishedNotRanked="_notQualified as FinishedNotRanked" OnSubmission="Untoggle" />
        </MudCollapse>
        <MudCollapse Expanded="@(_buttonValue == NotQualified.DISQUALIFIED)">
            <DisqualifyForm Disqualified="_notQualified as Disqualified" OnSubmission="Untoggle" />
        </MudCollapse>
        <MudCollapse Expanded="@(_buttonValue.Contains(NotQualified.FAILED_TO_QUALIFY))">
            <FailedToQualifyForm FailedToQualify="_notQualified as FailedToQualify" OnSubmission="Untoggle" />
        </MudCollapse>
    }

</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;
    NotQualified? _notQualified => _participationBehind.SelectedParticipation?.NotQualified;
    private string? _buttonValue {
        get => _value != null ? _value : _notQualified?.EliminationCode;
        set { _value = value; }
    }
    private string? _value;
    private MudToggleGroup<string> toggleGroup = default!;
    private Participation _selectedParticipation = default!;
    private string SmallTextClass = "font-size-10";

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    public void OnToggle(string value)
    {
        _buttonValue = value;
    }

    public void Untoggle()
    {
        _buttonValue = null;
    }
}
