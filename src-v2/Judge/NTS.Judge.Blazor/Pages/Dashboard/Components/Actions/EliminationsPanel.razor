@using NTS.Domain.Core.Entities.ParticipationAggregate
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Pages.Dashboard.Components.Actions.EliminationForms
@using NTS.Judge.Blazor.Ports
@using Not.Structures

@inherits NotComponent

<MudStack Class="@Class">

    <MudPaper Elevation="1">
        <MudToggleGroup @bind-Value="_toggleValue" Delimiters="true" Color="Color.Error" SelectionMode="SelectionMode.ToggleSelection">

            <MudToggleItem Value="NotQualified.WITHDRAWN" />

            <MudToggleItem Value="NotQualified.RETIRED" />

            <MudToggleItem Value="NotQualified.FINISHED_NOT_RANKED" />

            <MudToggleItem Value="NotQualified.DISQUALIFIED" />

            <MudToggleItem Value="NotQualified.FAILED_TO_QUALIFY" />
        </MudToggleGroup>

        <MudCollapse Expanded="_toggleValue != null">
            @if (_toggleValue == NotQualified.WITHDRAWN)
            {
                <WithdrawForm Withdrawn="_notQualified as Withdrawn" />
            }
            else if (_toggleValue == NotQualified.RETIRED)
            {
                <RetireForm Retired="_notQualified as Retired" />
            }
            else if (_toggleValue == NotQualified.FINISHED_NOT_RANKED)
            {
                <FinishNotRankedForm FinishedNotRanked="_notQualified as FinishedNotRanked" />
            }
            else if (_toggleValue == NotQualified.DISQUALIFIED)
            {
                <DisqualifyForm Disqualified="_notQualified as Disqualified" />
            }
            else if (_toggleValue == NotQualified.FAILED_TO_QUALIFY)
            {
                <FailedToQualifyForm FailedToQualify="_notQualified as FailedToQualify" />
            }
        </MudCollapse>
    </MudPaper>
</MudStack>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;

    NotQualified? _notQualified => _participationBehind.SelectedParticipation?.NotQualified;
    string? _toggleValue
    {
        get => _inputValue != null ? _inputValue : _notQualified?.EliminationCode;
        set => _inputValue = value; 
    }
    string? _inputValue;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    protected override void OnBeforeRender()
    {
        ResetInput();
    }

    void ResetInput()
    {
        _inputValue = null;
    }
}
