@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Pages.Dashboard.Components.Actions.EliminationForms
@using NTS.Judge.Blazor.Ports
@using Not.Structures

@inherits NotComponent

<MudPaper Class="d-flex flex-column mb-2" Elevation="0">

    <MudToggleGroup @bind-Value="_toggleValue" Delimiters="true" Color="Color.Error" SelectionMode="SelectionMode.ToggleSelection">
        <MudToggleItem Value="NotQualified.WITHDRAWN" />

        <MudToggleItem Value="NotQualified.RETIRED" />

        <MudToggleItem Value="NotQualified.FINISHED_NOT_RANKED" />

        <MudToggleItem Value="NotQualified.DISQUALIFIED" />

        <MudToggleItem Value="NotQualified.FAILED_TO_QUALIFY" />
    </MudToggleGroup>

    @if(_notQualified != null || _toggleValue != null)
    {
        <MudCollapse Expanded="@(_toggleValue == NotQualified.WITHDRAWN)" >
            <WithdrawForm Withdrawn="_notQualified as Withdrawn" />
        </MudCollapse>

        <MudCollapse Expanded="@(_toggleValue == NotQualified.RETIRED)">
            <RetireForm Retired="_notQualified as Retired" />
        </MudCollapse>

        <MudCollapse Expanded="@(_toggleValue == NotQualified.FINISHED_NOT_RANKED)">
            <FinishNotRankedForm FinishedNotRanked="_notQualified as FinishedNotRanked" />
        </MudCollapse>

        <MudCollapse Expanded="@(_toggleValue == NotQualified.DISQUALIFIED)">
            <DisqualifyForm Disqualified="_notQualified as Disqualified" />
        </MudCollapse>

        <MudCollapse Expanded="@(_toggleValue == NotQualified.FAILED_TO_QUALIFY)">
            <FailedToQualifyForm FailedToQualify="_notQualified as FailedToQualify" />
        </MudCollapse>
    }
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;

    NotQualified? _notQualified => _participationBehind.SelectedParticipation?.NotQualified;
    string? _toggleValue
    {
        get => _inputValue != null ? _inputValue : _notQualified?.EliminationCode;
        set => _inputValue = value; 
    }
    string? _inputValue;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    protected override void OnBeforeRender()
    {
        ResetInput();
    }

    void ResetInput()
    {
        _inputValue = null;
    }
}
