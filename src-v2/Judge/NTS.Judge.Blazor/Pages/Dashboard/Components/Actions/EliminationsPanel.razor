@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Ports
@using Not.Structures
@using static NTS.Judge.Blazor.Pages.Dashboard.Components.Actions.ToggleForm

<h4>Eliminations Panel</h4>

<MudPaper Class="d-flex flex-column mb-2" Elevation="0">
    <MudToggleGroup @ref="toggleGroup" T="string" TextClass="@SmallTextClass" Delimiters="true" Color="Color.Error" Rounded="true"
                    SelectionMode="SelectionMode.ToggleSelection" Style="width: 20rem" ValueChanged="OnToggle" Value="ToggleGroupSelection">
        <MudToggleItem Text="Withdrawn" Value="@("Withdraw")" />
        <MudToggleItem Text="Retired" Value="@("Retire")" />
        <MudToggleItem Text="Finished Not Ranked" Value="@("FinishNotRanked")" />
        <MudToggleItem Text="Disqualified" Value="@("Disqualify")" />
        <MudToggleItem Text="Failed to Qualify" Value="@("FailToQualify")" />
    </MudToggleGroup>
    <MudCollapse Expanded="_toggleFormActive">
        <ToggleForm ReasonActive="_reasonActive" SelectActive="_selectActive" OnSubmit="Submit"></ToggleForm>
    </MudCollapse>
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;

    private MudToggleGroup<string> toggleGroup = default!;
    private bool _reasonActive { get; set; } = false;
    private bool _selectActive { get; set; } = false;
    private bool _toggleFormActive { get; set; } = false;
    private QualificationRevokeType? _qualificationRevokeType = null;
    private string SmallTextClass = "font-size-10";
    private string ToggleGroupSelection = "";

    public void OnToggle(string value)
    {
        _reasonActive = false;
        _selectActive = false;
        ToggleGroupSelection = value;
        if(value != null)
        {
            _toggleFormActive = true;
            _qualificationRevokeType = (QualificationRevokeType)Enum.Parse(typeof(QualificationRevokeType), value);
        }
        else
        {
            _toggleFormActive = false;
        }
        if (value == "FinishNotRanked" || value == "Disqualify")
        {
            _reasonActive = true;
        }
        else if(value == "FaiToQualify")
        {
            _selectActive = true;
        }
    }

    public async void Submit(FormData data)
    {
        if (data.Codes.Contains(FTQCodes.FTC))
        {
            _qualificationRevokeType = QualificationRevokeType.FailToCompleteLoop;
        }
        if (_qualificationRevokeType == null)
        {
            await _participationBehind.RestoreQualification(data.TandemNumber);
        }
        else
        {
            await _participationBehind.RevokeQualification(data.TandemNumber, (QualificationRevokeType)_qualificationRevokeType, data.Reason, data.Codes.ToArray());
        }
    }
}
