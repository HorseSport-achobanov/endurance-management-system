@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Ports
@using Not.Blazor.TM

@inherits NotComponent

<MudPaper Class="d-flex flex-row mb-4" Elevation="0">
    <NotSwitch Label="Reinspection" Value="_reinspectionToggled" ValueChanged="ToggleReinspection" 
               IconForTrue="@Icons.Material.Filled._360" IconForFalse="@Icons.Material.Filled._360" />
    <NotSwitch Label="Required Inspection" Value="_requiredInspectionToggled" ValueChanged="ToggleRequiredInspection"
               IconForTrue="@Icons.Material.Filled.HourglassEmpty" IconForFalse="@Icons.Material.Filled.HourglassEmpty" />
</MudPaper>

@code {
    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;
    Participation _selectedParticipation => _participationBehind.SelectedParticipation!;
    Phase? _currentPhase => _selectedParticipation.Phases.Current;
    bool _reinspectionToggled => _currentPhase.IsReinspectionRequested;
    bool _requiredInspectionToggled => _currentPhase.IsRIRequested;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    private async void ToggleReinspection(bool value)
    {
        _participationBehind.RequestReinspection(value);
        await InvokeAsync(StateHasChanged); // TODO test without as it should re-render on its own
    }
    private async void ToggleRequiredInspection(bool value)
    {
        _participationBehind.RequestRequiredInspection(value);
        await InvokeAsync(StateHasChanged); // TODO test without
    }
}
