@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Ports
@using System.Diagnostics

@inherits NotComponent

@if (_formModel?.Reason != null)
{
    <MudTextField @ref="reasonInput" @bind-Value="_formModel.Reason" Label="Reason" Variant="Variant.Outlined"></MudTextField>
}

<MudButton Class="mt-4 one-third-width" Variant="Variant.Filled" Color="Color.Primary" OnClick="Update">
    @Localizer.Get(SubmitButtonMessage)
</MudButton>

@code {
    FinishedNotRanked? _finishedNotRanked => _participationBehind.SelectedParticipation?.NotQualified as FinishedNotRanked;
    FInishNotRankedFormModel? _formModel => _finishedNotRanked != null ? new FInishNotRankedFormModel(_finishedNotRanked) : null;

    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;

    private MudTextField<string?> reasonInput = default!;
    public string? Reason { get; set; } = null;
    private string SubmitButtonMessage = "";
    [Parameter]
    public bool RevokedQualification { get; set; } = default!;
    FormData? _formData;

    protected override async Task OnInitializedAsync()
    {
        await Observe(_participationBehind);
    }

    protected override void OnParametersSet()
    {
        _formData = _participationBehind.GetFormData();
        Debug.WriteLine("Ruckai ruckai");
    }

    public async Task Update()
    {
        Participation? participation = _participationBehind.SelectedParticipation;
        var reason = participation?.NotQualified?.Complement;
        var tandemNumber = participation!.Tandem.Number;
        await _participationBehind.RevokeQualification(tandemNumber, QualificationRevokeType.FinishNotRanked, reason);
    }

    public class FInishNotRankedFormModel
    {
        public FInishNotRankedFormModel(FinishedNotRanked finishedNotRanked)
        {
            Reason = finishedNotRanked.Complement ?? "";
        }

        public string Reason { get; set; }
    }
}
