@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Ports
@inherits NotComponent

<MudTextField @bind-Value="Reason" Label="Reason" Variant="Variant.Outlined"></MudTextField>

<MudButton Class="mt-4 one-third-width" Variant="Variant.Filled" Color="Color.Primary" OnClick="Eliminate">
    @Localizer.Get("Eliminate")
</MudButton>

<MudButton Class="mt-4 one-third-width" Variant="Variant.Filled" Color="Color.Primary" OnClick="Restore">
    @Localizer.Get("Restore")
</MudButton>

@code {

    [Inject]
    IParticipationBehind _participationBehind { get; set; } = default!;
    [Parameter]
    public Disqualified? Disqualified { get; set; }
    [Parameter]
    public EventCallback OnRestore { get; set; }
    [Parameter]
    public EventCallback OnEliminate { get; set; }
    private string? Reason { get; set; }

    protected override void OnParametersSet()
    {
        Reason = Disqualified?.Complement;
    }

    public async Task Eliminate()
    {
        Participation? participation = _participationBehind.SelectedParticipation;
        var tandemNumber = participation!.Tandem.Number;
        await _participationBehind.Disqualify(tandemNumber, Reason);
        await OnEliminate.InvokeAsync();
    }

    public async Task Restore()
    {
        await OnRestore.InvokeAsync();
    }
}
