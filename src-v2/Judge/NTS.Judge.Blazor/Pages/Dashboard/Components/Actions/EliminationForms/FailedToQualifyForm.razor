@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Objects
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Pages.Dashboard.Components.Actions.EliminationForms.Components
@using NTS.Judge.Blazor.Ports
@using Not.Structures

@inherits EliminationForm

<MudSelect @bind-SelectedValues="@Codes" Label="Failed to Qualify Reason" MultiSelection="true" Delimiter="+" Placeholder="Select a reason">
    @foreach (var failToQualifyCode in SelectListModel.FromEnum<FTQCodes>())
    {
        <MudSelectItem Value="@failToQualifyCode.Value">
            <MudText Typo="Typo.body2">@failToQualifyCode.Value</MudText>
            <MudText Typo="Typo.subtitle2">@failToQualifyCode.Description</MudText>
        </MudSelectItem>
    }
</MudSelect>

<MudCollapse Expanded="Codes.Contains(FTQCodes.FTC)">
    <EliminationFormReason @bind-Value="_reason" />
</MudCollapse>

<EliminationFormActions Form="this" />

@code {
    IEnumerable<FTQCodes> Codes { get; set; } = [];
    string? _reason;

    [Parameter]
    public FailedToQualify? FailedToQualify { get; set; }

    protected override void OnParametersSet()
    {
        if (FailedToQualify != null)
        {
            Codes = FailedToQualify.Codes.ToList();
            _reason = FailedToQualify.Complement;
        }
    }

    protected override async Task EliminateAction()
    {
        //TODO: Validate for incorrect inputs
        await _participationBehind.FailToQualify(_reason, Codes.ToArray());
        await OnEliminate.InvokeAsync();
    }
}