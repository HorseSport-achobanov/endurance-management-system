@using NTS.Domain.Core.Aggregates.Participations
@using NTS.Domain.Objects
@using NTS.Judge.Blazor.Enums
@using NTS.Judge.Blazor.Pages.Dashboard.Components.Actions.EliminationForms.Components
@using NTS.Judge.Blazor.Ports
@using Not.Structures

@inherits EliminationForm

<MudPaper Elevation="1" Class="pa-2">
    <MudSelect @bind-SelectedValues="@_codes" MultiSelection="true" Delimiter="+" Class="mt-4"
        Label="@Localizer.Get("Failed to Qualify Reason")" Placeholder="@Localizer.Get("Select a reason")">
    
        @foreach (var ftqCode in SelectListModel.FromEnum<FTQCodes>())
        {
            <MudSelectItem Value="@ftqCode.Value">
                <MudText Typo="Typo.body1">@ftqCode.Value</MudText>

                <MudText Typo="Typo.caption">@ftqCode.Description</MudText>
            </MudSelectItem>
        }
    </MudSelect>

    <MudCollapse Expanded="_codes.Contains(FTQCodes.FTC)">
        <EliminationFormReason @bind-Value="_reason" />
    </MudCollapse>

    <EliminationFormActions Form="this" />
</MudPaper>

@code {
    IEnumerable<FTQCodes> _codes { get; set; } = [];
    string? _reason;

    [Parameter]
    public FailedToQualify? FailedToQualify { get; set; }

    protected override void OnParametersSet()
    {
        if (FailedToQualify != null)
        {
            _codes = FailedToQualify.Codes.ToList();
            _reason = FailedToQualify.Complement;
        }
    }

    internal override async Task Eliminate()
    {
        //TODO: Validate for incorrect inputs
        await _participationBehind.FailToQualify(_reason, _codes.ToArray());
    }
}