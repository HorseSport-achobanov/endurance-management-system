@using NTS.Judge.Blazor.Shared;
@using System.Reflection;
@using NTS.Judge.Blazor.Shared.Components

<ExceptionHandler T="Strings" @ref="this.exceptionHandler">
    <ChildContent>
        <Router AppAssembly="Assembly" AdditionalAssemblies="_routeAssemblies">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </ChildContent>

    <ErrorContent>
        <br />
        <br />
        <div class="container">
            <pre>@this.exceptionHandler.Message</pre>
            <pre>@this.exceptionHandler.StackTrace</pre>
        </div>
        <button class="btn btn-primary" @onclick="_ => this.exceptionHandler.Recover()">Back</button>
    </ErrorContent>
</ExceptionHandler>

@code {
    private IEnumerable<Assembly> _routeAssemblies = new List<Assembly> { typeof(JudgeBlazorRoot).Assembly };
    private ExceptionHandler<Strings> exceptionHandler = default!;

    [Parameter]
    public Assembly Assembly { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}