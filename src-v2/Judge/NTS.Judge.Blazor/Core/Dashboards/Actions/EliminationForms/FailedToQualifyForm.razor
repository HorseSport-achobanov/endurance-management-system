@using NTS.Domain.Core.Entities.ParticipationAggregate
@using NTS.Domain.Objects
@using NTS.Judge.Blazor.Core.Dashboards.Actions.EliminationForms.Shared
@using Not.Localization
@using Not.Structures

@inherits EliminationForm

<MudPaper Elevation="1" Class="pa-2">
    <MudSelect @bind-SelectedValues="@_codes" MultiSelection="true" Delimiter="+" Class="mt-4"
        Label="@Localizer.Get("Failed to Qualify Reason")" Placeholder="@Localizer.Get("Select a reason")">
    
        @foreach (var ftqCode in SelectListModel.FromEnum<FtqCode>())
        {
             <MudTooltip Text="@ftqCode.Description" Inline="false" RootStyle="width:inherit;">
                <MudSelectItem Value="@ftqCode.Value">
                    <MudText Typo="Typo.body1">@ftqCode.Value</MudText>
                </MudSelectItem>
            </MudTooltip>

        }
    </MudSelect>

    <MudCollapse Expanded="_codes.Contains(FtqCode.FTC)">
        <EliminationFormReason @bind-Value="_reason" />
    </MudCollapse>

    <EliminationFormActions Form="this" />
</MudPaper>

@code {
    IEnumerable<FtqCode> _codes { get; set; } = [];
    string? _reason;

    [Parameter]
    public FailedToQualify? FailedToQualify { get; set; }

    protected override void OnParametersSet()
    {
        if (FailedToQualify != null)
        {
            _codes = FailedToQualify.FtqCodes.ToList();
            _reason = FailedToQualify.Complement;
        }
    }

    internal override async Task Eliminate()
    {
        await Eliminations.FailToQualify(_codes.ToArray(), _reason);
    }
}
