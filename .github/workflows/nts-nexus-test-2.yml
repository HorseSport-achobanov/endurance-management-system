name: "[net8] deploy nts-nexus-test-2"
on:
  push:
    branches:
    - feature/azure-function-poc
env:
  AZURE_FUNCTIONAPP_NAME: nts-nexus-test-2
  AZURE_RESOURCE_GROUP: NTS
  AZURE_STORAGE_CONTAINER: azurefunctions
  AZURE_STORAGE_ACCOUNT: ntsstoragedev
  AZURE_FUNCTIONAPP_PACKAGE_PATH: Nexus/NTS.Nexus.Test/published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: src/Nexus/NTS.Nexus.Test
  DOTNET_CORE_VERSION_INPROC: 6.0.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    # - name: Setup .NET Core (for inproc extensions)
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: ${{ env.DOTNET_CORE_VERSION_INPROC }}
    #     include-prerelease: True
        
    #Slap on top of every build: see https://github.com/Not-Endurance/not-timing-system/issues/361
    - name: Set current workding directory env
      run: echo "CURRENT_DIR=$(pwd)/src" >> $GITHUB_ENV
    - name: Remove local-cache NuGet source
      run: dotnet nuget remove source "local-cache" --configfile ./src/NuGet.config

    - name: Restore
      run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
    - name: Build
      run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} -property:SolutionDir="$CURRENT_DIR" --no-restore
    - name: Publish
      run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} -property:SolutionDir="$CURRENT_DIR" --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: functionapp
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} 

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: functionapp
        path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: Zip function
      run: zip -r functionapp.zip ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    - name: Test zip
      run: ls -la

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SUBSCRIPTION_DEV_CREDENTIALS }}

    - name: Generate SAS URL
      id: sas
      run: |
        TOKEN=$(az storage blob generate-sas \
        --connection-string ${{ secrets.AZURE_NTSSTORAGEDEV_CONNECTION_STRING }} \
        --container-name ${{ env.AZURE_STORAGE_CONTAINER }} \
        --name functionapp.zip \
        --permissions r \
        --expiry 2036-01-01 \
        --output tsv)

        FULL_URL="https://${{ env.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/azurefunctions/functionapp.zip?$TOKEN"
        echo "SAS_URL=$FULL_URL" >> $GITHUB_ENV

    - name: Test SAS Token
      run: echo $TOKEN

    - name: Upload to blob
      run: |
        az storage blob upload \
        --connection-string ${{ secrets.AZURE_NTSSTORAGEDEV_CONNECTION_STRING }} \
        --container-name ${{ env.AZURE_STORAGE_CONTAINER }} \
        --sas-token $TOKEN \
        --name functionapp.zip \
        --file functionapp.zip

    - name: Configure WEBSITE_RUN_FROM_PACKAGE
      run: |
        az functionapp config appsettings set \
        --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
        --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
        --settings WEBSITE_RUN_FROM_PACKAGE="$SAS_URL"

    - name: Restart function
      run: |
        az functionapp restart \
        --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
        --name ${{ env.AZURE_FUNCTIONAPP_NAME }}
